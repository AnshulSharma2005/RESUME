{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Resume Craft\n\n## Overview\n\nResume Craft is a modern full-stack web application for creating, managing, and optimizing resumes. The platform features an experience-level-based template system, built-in ATS (Applicant Tracking System) scoring, and professional PDF export capabilities. Users can authenticate via email or Google, create multiple resumes using various templates, and receive feedback to improve their resume's compatibility with ATS systems.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript running on Vite for fast development and builds\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, accessible UI components\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n- **UI Components**: Comprehensive component library including dialogs, forms, tables, and interactive elements\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server framework\n- **Database ORM**: Drizzle ORM with PostgreSQL for type-safe database operations\n- **API Design**: RESTful API with structured error handling and request/response logging middleware\n- **Data Storage**: In-memory storage implementation with interface for easy database swapping\n\n### Authentication System\n- **Provider**: Firebase Authentication supporting email/password and Google OAuth\n- **Session Management**: Firebase handles authentication state with React context for user management\n- **User Data**: Local user profiles stored in application database, synced with Firebase users\n\n### Data Architecture\n- **Schema Design**: Shared TypeScript schemas using Drizzle and Zod for consistent validation\n- **Core Entities**: Users, Resumes, and ATS Analyses with proper foreign key relationships\n- **Content Structure**: JSON-based resume content storage supporting flexible template rendering\n\n### Template System\n- **Experience-Based**: Templates categorized by experience level (beginner, mid-career, professional)\n- **Categories**: Professional, modern, creative, and academic template styles\n- **Rendering**: Dynamic template renderer supporting multiple layout styles and color schemes\n\n### ATS Scoring Engine\n- **Analysis**: Client-side resume analysis for keywords, formatting, content quality, and length\n- **Feedback**: Detailed scoring with section-by-section recommendations\n- **Tracking**: Historical ATS analysis storage with usage limits\n\n## External Dependencies\n\n### Authentication Services\n- **Firebase**: Complete authentication solution with email/password and Google OAuth providers\n- **Google OAuth**: Social login integration through Firebase\n\n### Database Infrastructure\n- **PostgreSQL**: Primary database using Neon serverless PostgreSQL\n- **Drizzle Kit**: Database migrations and schema management\n\n### UI and Styling\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Radix UI**: Accessible primitive components for complex UI elements\n- **Lucide React**: Icon library for consistent iconography\n\n### Development Tools\n- **Vite**: Build tool with HMR and TypeScript support\n- **ESBuild**: Fast bundling for production builds\n- **TypeScript**: Type safety across the entire application stack\n\n### PDF Generation\n- **jsPDF**: Client-side PDF generation for resume exports\n- **Custom Export Service**: Template-aware PDF generation with proper formatting\n\n### Additional Libraries\n- **React Beautiful DnD**: Drag and drop functionality for resume section reordering\n- **Date-fns**: Date manipulation and formatting utilities\n- **UUID**: Unique identifier generation for entities\n- **React Day Picker**: Calendar components for date selection","size_bytes":3896},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        shimmer: {\n          \"0%\": { backgroundPosition: \"200% 0\" },\n          \"100%\": { backgroundPosition: \"-200% 0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.6s ease-out\",\n        shimmer: \"shimmer 1.5s infinite\",\n      },\n      backgroundImage: {\n        \"gradient-radial\": \"radial-gradient(var(--tw-gradient-stops))\",\n        \"gradient-conic\": \"conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3401},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { z } from \"zod\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertResumeSchema, insertAtsAnalysisSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User routes\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const user = await storage.getUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser({\n        ...userData,\n        id: req.body.id // Firebase UID\n      });\n      res.status(201).json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", async (req, res) => {\n    try {\n      const updates = insertUserSchema.partial().parse(req.body);\n      const user = await storage.updateUser(req.params.id, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid user data\", errors: error.errors });\n      }\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/analytics\", async (req, res) => {\n    try {\n      const analytics = await storage.getUserAnalytics(req.params.id);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Get user analytics error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Resume routes\n  app.get(\"/api/resumes\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      const resumes = await storage.getUserResumes(userId);\n      res.json(resumes);\n    } catch (error) {\n      console.error(\"Get resumes error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/resumes/:id\", async (req, res) => {\n    try {\n      const resume = await storage.getResume(req.params.id);\n      if (!resume) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n      res.json(resume);\n    } catch (error) {\n      console.error(\"Get resume error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/resumes\", async (req, res) => {\n    try {\n      const resumeData = insertResumeSchema.parse(req.body);\n      const resume = await storage.createResume(resumeData);\n      res.status(201).json(resume);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid resume data\", errors: error.errors });\n      }\n      console.error(\"Create resume error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.put(\"/api/resumes/:id\", async (req, res) => {\n    try {\n      const updates = insertResumeSchema.partial().parse(req.body);\n      const resume = await storage.updateResume(req.params.id, updates);\n      if (!resume) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n      res.json(resume);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid resume data\", errors: error.errors });\n      }\n      console.error(\"Update resume error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.delete(\"/api/resumes/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteResume(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Delete resume error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/resumes/:id/duplicate\", async (req, res) => {\n    try {\n      const originalResume = await storage.getResume(req.params.id);\n      if (!originalResume) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n\n      const duplicateData = {\n        ...originalResume,\n        title: `${originalResume.title} (Copy)`,\n        atsScore: null,\n        atsAttempts: 0,\n      };\n      delete (duplicateData as any).id;\n      delete (duplicateData as any).createdAt;\n      delete (duplicateData as any).updatedAt;\n\n      const duplicate = await storage.createResume(duplicateData as InsertResume);\n      res.status(201).json(duplicate);\n    } catch (error) {\n      console.error(\"Duplicate resume error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // ATS Analysis routes\n  app.get(\"/api/ats-analyses\", async (req, res) => {\n    try {\n      const resumeId = req.query.resumeId as string;\n      if (!resumeId) {\n        return res.status(400).json({ message: \"resumeId is required\" });\n      }\n      const analyses = await storage.getResumeAtsHistory(resumeId);\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Get ATS analyses error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/ats-analyses\", async (req, res) => {\n    try {\n      const analysisData = insertAtsAnalysisSchema.parse(req.body);\n      \n      // Check if resume exists and user has attempts remaining\n      const resume = await storage.getResume(analysisData.resumeId);\n      if (!resume) {\n        return res.status(404).json({ message: \"Resume not found\" });\n      }\n\n      if ((resume.atsAttempts || 0) >= 5) {\n        return res.status(400).json({ message: \"Maximum ATS analysis attempts reached\" });\n      }\n\n      const analysis = await storage.createAtsAnalysis(analysisData);\n      \n      // Update resume with new ATS score and increment attempts\n      await storage.updateResume(analysisData.resumeId, {\n        atsScore: analysisData.score,\n        atsAttempts: (resume.atsAttempts || 0) + 1,\n      });\n\n      res.status(201).json(analysis);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid analysis data\", errors: error.errors });\n      }\n      console.error(\"Create ATS analysis error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Search and filtering routes\n  app.get(\"/api/resumes/search\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const searchTerm = req.query.q as string;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      if (!searchTerm) {\n        return res.status(400).json({ message: \"Search term is required\" });\n      }\n\n      const resumes = await storage.searchResumes(userId, searchTerm);\n      res.json(resumes);\n    } catch (error) {\n      console.error(\"Search resumes error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/templates/:templateId/resumes\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const templateId = req.params.templateId;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n\n      const resumes = await storage.getResumesByTemplate(userId, templateId);\n      res.json(resumes);\n    } catch (error) {\n      console.error(\"Get resumes by template error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8521},"server/storage.ts":{"content":"import { type User, type InsertUser, type Resume, type AtsAnalysis, type InsertResume, type InsertAtsAnalysis } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser & { id: string }): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  getUserAnalytics(userId: string): Promise<{\n    totalResumes: number;\n    avgAtsScore: number;\n    templateUsage: Record<string, number>;\n    mostRecentUpdate: string | null;\n  }>;\n\n  // Resume operations\n  getResume(id: string): Promise<Resume | undefined>;\n  getUserResumes(userId: string): Promise<Resume[]>;\n  createResume(resume: InsertResume): Promise<Resume>;\n  updateResume(id: string, updates: Partial<InsertResume>): Promise<Resume | undefined>;\n  deleteResume(id: string): Promise<boolean>;\n  searchResumes(userId: string, searchTerm: string): Promise<Resume[]>;\n  getResumesByTemplate(userId: string, templateId: string): Promise<Resume[]>;\n\n  // ATS Analysis operations\n  createAtsAnalysis(analysis: InsertAtsAnalysis): Promise<AtsAnalysis>;\n  getResumeAtsHistory(resumeId: string): Promise<AtsAnalysis[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private resumes: Map<string, Resume>;\n  private atsAnalyses: Map<string, AtsAnalysis>;\n\n  constructor() {\n    this.users = new Map();\n    this.resumes = new Map();\n    this.atsAnalyses = new Map();\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(userData: InsertUser & { id: string }): Promise<User> {\n    const user: User = {\n      ...userData,\n      displayName: userData.displayName ?? null,\n      photoURL: userData.photoURL ?? null,\n      experienceLevel: userData.experienceLevel ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n\n    const updatedUser: User = {\n      ...user,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async getUserAnalytics(userId: string): Promise<{\n    totalResumes: number;\n    avgAtsScore: number;\n    templateUsage: Record<string, number>;\n    mostRecentUpdate: string | null;\n  }> {\n    const userResumes = await this.getUserResumes(userId);\n    const totalResumes = userResumes.length;\n    \n    if (totalResumes === 0) {\n      return {\n        totalResumes: 0,\n        avgAtsScore: 0,\n        templateUsage: {},\n        mostRecentUpdate: null,\n      };\n    }\n\n    const atsScores = userResumes\n      .map(resume => resume.atsScore)\n      .filter((score): score is number => score !== null && score !== undefined);\n    \n    const avgAtsScore = atsScores.length > 0 \n      ? Math.round(atsScores.reduce((sum, score) => sum + score, 0) / atsScores.length)\n      : 0;\n\n    const templateUsage = userResumes.reduce((acc, resume) => {\n      acc[resume.templateId] = (acc[resume.templateId] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    const mostRecentUpdate = userResumes.length > 0 \n      ? userResumes\n          .sort((a, b) => new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime())[0]\n          .updatedAt!.toISOString()\n      : null;\n\n    return {\n      totalResumes,\n      avgAtsScore,\n      templateUsage,\n      mostRecentUpdate,\n    };\n  }\n\n  // Resume operations\n  async getResume(id: string): Promise<Resume | undefined> {\n    return this.resumes.get(id);\n  }\n\n  async getUserResumes(userId: string): Promise<Resume[]> {\n    return Array.from(this.resumes.values())\n      .filter(resume => resume.userId === userId)\n      .sort((a, b) => new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime());\n  }\n\n  async createResume(resumeData: InsertResume): Promise<Resume> {\n    const id = randomUUID();\n    const resume: Resume = {\n      id,\n      ...resumeData,\n      atsScore: null,\n      atsAttempts: 0,\n      isPublic: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.resumes.set(id, resume);\n    return resume;\n  }\n\n  async updateResume(id: string, updates: Partial<InsertResume & { atsScore?: number | null; atsAttempts?: number }>): Promise<Resume | undefined> {\n    const resume = this.resumes.get(id);\n    if (!resume) return undefined;\n\n    const updatedResume: Resume = {\n      ...resume,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.resumes.set(id, updatedResume);\n    return updatedResume;\n  }\n\n  async deleteResume(id: string): Promise<boolean> {\n    const existed = this.resumes.has(id);\n    if (existed) {\n      this.resumes.delete(id);\n      // Also delete related ATS analyses\n      const analysesToDelete = Array.from(this.atsAnalyses.entries())\n        .filter(([, analysis]) => analysis.resumeId === id)\n        .map(([analysisId]) => analysisId);\n      \n      analysesToDelete.forEach(analysisId => this.atsAnalyses.delete(analysisId));\n    }\n    return existed;\n  }\n\n  async searchResumes(userId: string, searchTerm: string): Promise<Resume[]> {\n    const userResumes = await this.getUserResumes(userId);\n    const lowercaseSearch = searchTerm.toLowerCase();\n    \n    return userResumes.filter(resume =>\n      resume.title.toLowerCase().includes(lowercaseSearch) ||\n      resume.templateId.toLowerCase().includes(lowercaseSearch) ||\n      (typeof resume.content === 'object' && \n       JSON.stringify(resume.content).toLowerCase().includes(lowercaseSearch))\n    );\n  }\n\n  async getResumesByTemplate(userId: string, templateId: string): Promise<Resume[]> {\n    const userResumes = await this.getUserResumes(userId);\n    return userResumes.filter(resume => resume.templateId === templateId);\n  }\n\n  // ATS Analysis operations\n  async createAtsAnalysis(analysisData: InsertAtsAnalysis): Promise<AtsAnalysis> {\n    const id = randomUUID();\n    const analysis: AtsAnalysis = {\n      id,\n      ...analysisData,\n      keywords: analysisData.keywords ?? null,\n      suggestions: analysisData.suggestions ?? null,\n      createdAt: new Date(),\n    };\n    this.atsAnalyses.set(id, analysis);\n    return analysis;\n  }\n\n  async getResumeAtsHistory(resumeId: string): Promise<AtsAnalysis[]> {\n    return Array.from(this.atsAnalyses.values())\n      .filter(analysis => analysis.resumeId === resumeId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime())\n      .slice(0, 10); // Return last 10 analyses\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6977},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, jsonb, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  displayName: text(\"display_name\"),\n  photoURL: text(\"photo_url\"),\n  provider: text(\"provider\").notNull(), // 'email' or 'google'\n  experienceLevel: text(\"experience_level\"), // 'beginner', 'mid-career', 'professional'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const resumes = pgTable(\"resumes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  templateId: text(\"template_id\").notNull(),\n  content: jsonb(\"content\").notNull(), // Resume data as JSON\n  atsScore: integer(\"ats_score\"),\n  atsAttempts: integer(\"ats_attempts\").default(0),\n  isPublic: boolean(\"is_public\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const atsAnalyses = pgTable(\"ats_analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  resumeId: varchar(\"resume_id\").notNull().references(() => resumes.id, { onDelete: \"cascade\" }),\n  score: integer(\"score\").notNull(),\n  feedback: jsonb(\"feedback\").notNull(), // Detailed feedback as JSON\n  keywords: jsonb(\"keywords\"), // Keyword analysis\n  suggestions: jsonb(\"suggestions\"), // Improvement suggestions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  displayName: true,\n  photoURL: true,\n  provider: true,\n  experienceLevel: true,\n});\n\nexport const insertResumeSchema = createInsertSchema(resumes).pick({\n  title: true,\n  templateId: true,\n  content: true,\n  userId: true,\n});\n\nexport const insertAtsAnalysisSchema = createInsertSchema(atsAnalyses).pick({\n  resumeId: true,\n  score: true,\n  feedback: true,\n  keywords: true,\n  suggestions: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Resume = typeof resumes.$inferSelect;\nexport type InsertResume = z.infer<typeof insertResumeSchema>;\nexport type AtsAnalysis = typeof atsAnalyses.$inferSelect;\nexport type InsertAtsAnalysis = z.infer<typeof insertAtsAnalysisSchema>;\n\n// Resume content type\nexport interface ResumeContent {\n  personalInfo: {\n    firstName: string;\n    lastName: string;\n    email: string;\n    phone: string;\n    location: string;\n    website?: string;\n    linkedin?: string;\n    github?: string;\n  };\n  summary: string;\n  experience: Array<{\n    id: string;\n    position: string;\n    company: string;\n    location: string;\n    startDate: string;\n    endDate: string;\n    current: boolean;\n    description: string;\n    achievements: string[];\n  }>;\n  education: Array<{\n    id: string;\n    degree: string;\n    school: string;\n    location: string;\n    graduationDate: string;\n    gpa?: string;\n    achievements: string[];\n  }>;\n  skills: Array<{\n    id: string;\n    category: string;\n    items: string[];\n  }>;\n  projects?: Array<{\n    id: string;\n    name: string;\n    description: string;\n    technologies: string[];\n    url?: string;\n    github?: string;\n  }>;\n  certifications?: Array<{\n    id: string;\n    name: string;\n    issuer: string;\n    date: string;\n    url?: string;\n  }>;\n  languages?: Array<{\n    id: string;\n    language: string;\n    proficiency: string;\n  }>;\n}\n\n// Experience levels\nexport type ExperienceLevel = 'beginner' | 'mid-career' | 'professional';\n\n// Template categories\nexport type TemplateCategory = 'professional' | 'creative' | 'modern';\n\n// ATS feedback structure\nexport interface AtsFeedback {\n  overall: {\n    score: number;\n    message: string;\n  };\n  sections: {\n    keywords: {\n      score: number;\n      found: string[];\n      missing: string[];\n      suggestions: string[];\n    };\n    format: {\n      score: number;\n      issues: string[];\n      suggestions: string[];\n    };\n    content: {\n      score: number;\n      issues: string[];\n      suggestions: string[];\n    };\n    length: {\n      score: number;\n      wordCount: number;\n      ideal: string;\n      suggestions: string[];\n    };\n  };\n}\n","size_bytes":4482},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/contexts/auth-context\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport ExperienceSelector from \"@/pages/experience-selector\";\nimport ResumeBuilder from \"@/pages/resume-builder\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/experience-selector\" component={ExperienceSelector} />\n      <Route path=\"/resume-builder/:resumeId?\">\n        {(params) => <ResumeBuilder resumeId={params.resumeId} />}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <QueryClientProvider client={queryClient}>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </QueryClientProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1339},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158.1, 64.4%, 51.6%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(43.3, 96.4%, 56.3%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n  --chart-1: hsl(262.1, 83.3%, 57.8%);\n  --chart-2: hsl(158.1, 64.4%, 51.6%);\n  --chart-3: hsl(43.3, 96.4%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.9%);\n  --chart-5: hsl(341.4, 75.2%, 50.9%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(262.1, 83.3%, 57.8%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(262.1, 83.3%, 57.8%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Fira Code', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222.2, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222.2, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222.2, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(158.1, 64.4%, 51.6%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217.2, 32.6%, 17.5%);\n  --muted-foreground: hsl(215, 20.2%, 65.1%);\n  --accent: hsl(43.3, 96.4%, 56.3%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217.2, 32.6%, 17.5%);\n  --input: hsl(217.2, 32.6%, 17.5%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n  --chart-1: hsl(262.1, 83.3%, 57.8%);\n  --chart-2: hsl(158.1, 64.4%, 51.6%);\n  --chart-3: hsl(43.3, 96.4%, 56.3%);\n  --chart-4: hsl(147.1, 78.5%, 41.9%);\n  --chart-5: hsl(341.4, 75.2%, 50.9%);\n  --sidebar: hsl(222.2, 84%, 4.9%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(262.1, 83.3%, 57.8%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-accent-foreground: hsl(210, 40%, 98%);\n  --sidebar-border: hsl(217.2, 32.6%, 17.5%);\n  --sidebar-ring: hsl(262.1, 83.3%, 57.8%);\n}\n\n/* Custom animations and effects */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(262.1, 83.3%, 57.8%) 0%, hsl(158.1, 64.4%, 51.6%) 100%);\n}\n\n.glass-effect {\n  background: rgba(255, 255, 255, 0.95);\n  backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.2);\n}\n\n.dark .glass-effect {\n  background: rgba(0, 0, 0, 0.80);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.hover-lift {\n  transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n\n.hover-lift:hover {\n  transform: translateY(-4px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n.pulse-slow {\n  animation: pulse 3s infinite;\n}\n\n.template-preview {\n  aspect-ratio: 3/4;\n  background: linear-gradient(45deg, hsl(var(--muted)) 25%, transparent 25%), \n              linear-gradient(-45deg, hsl(var(--muted)) 25%, transparent 25%), \n              linear-gradient(45deg, transparent 75%, hsl(var(--muted)) 75%), \n              linear-gradient(-45deg, transparent 75%, hsl(var(--muted)) 75%);\n  background-size: 20px 20px;\n  background-position: 0 0, 0 10px, 10px -10px, -10px 0px;\n}\n\n/* Smooth scrolling */\nhtml {\n  scroll-behavior: smooth;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n\n  /* Hide scrollbar for Chrome, Safari and Opera */\n  .no-scrollbar::-webkit-scrollbar {\n    display: none;\n  }\n\n  /* Hide scrollbar for IE, Edge and Firefox */\n  .no-scrollbar {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;  /* Firefox */\n  }\n}\n\n/* Resume editor specific styles */\n.resume-editor-grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  min-height: calc(100vh - 4rem);\n}\n\n.resume-section {\n  border: 2px dashed transparent;\n  transition: border-color 0.2s ease;\n}\n\n.resume-section:hover {\n  border-color: hsl(var(--border));\n}\n\n.resume-section.dragging {\n  border-color: hsl(var(--primary));\n  background: hsl(var(--primary) / 0.05);\n}\n\n/* ATS Score styling */\n.ats-score-excellent {\n  color: hsl(142, 71%, 45%);\n}\n\n.ats-score-good {\n  color: hsl(43, 96%, 56%);\n}\n\n.ats-score-needs-work {\n  color: hsl(0, 84%, 60%);\n}\n\n/* Loading states */\n.loading-shimmer {\n  background: linear-gradient(110deg, transparent 40%, hsl(var(--muted)) 50%, transparent 60%);\n  background-size: 200% 100%;\n  animation: shimmer 1.5s infinite;\n}\n\n@keyframes shimmer {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n/* Print styles for PDF preview */\n@media print {\n  body {\n    @apply bg-white text-black;\n    font-size: 12pt;\n    line-height: 1.4;\n  }\n  \n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break-inside-avoid {\n    break-inside: avoid;\n  }\n}\n","size_bytes":5906},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/auth-context.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\nimport {\n  User as FirebaseUser,\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  createUserWithEmailAndPassword,\n  signInWithRedirect,\n  getRedirectResult,\n  signOut,\n  updateProfile,\n} from \"firebase/auth\";\nimport { auth, googleProvider } from \"@/lib/firebase\";\nimport { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  currentUser: FirebaseUser | null;\n  userData: User | null;\n  loading: boolean;\n  signInWithEmail: (email: string, password: string) => Promise<void>;\n  signUpWithEmail: (email: string, password: string, displayName: string) => Promise<void>;\n  signInWithGoogle: () => Promise<void>;\n  logout: () => Promise<void>;\n  updateUserProfile: (displayName: string, photoURL?: string) => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [currentUser, setCurrentUser] = useState<FirebaseUser | null>(null);\n  const [userData, setUserData] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\n      setCurrentUser(user);\n      \n      if (user) {\n        // Fetch or create user data in our database\n        try {\n          const response = await fetch(`/api/users/${user.uid}`);\n          if (response.ok) {\n            const userData = await response.json();\n            setUserData(userData);\n          } else if (response.status === 404) {\n            // Create new user record\n            const newUserData = {\n              id: user.uid,\n              email: user.email!,\n              displayName: user.displayName,\n              photoURL: user.photoURL,\n              provider: user.providerData[0]?.providerId === 'google.com' ? 'google' : 'email',\n            };\n            \n            const createResponse = await fetch('/api/users', {\n              method: 'POST',\n              headers: { 'Content-Type': 'application/json' },\n              body: JSON.stringify(newUserData),\n            });\n            \n            if (createResponse.ok) {\n              const createdUser = await createResponse.json();\n              setUserData(createdUser);\n            }\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n        }\n      } else {\n        setUserData(null);\n      }\n      \n      setLoading(false);\n    });\n\n    // Handle redirect result for Google sign-in\n    getRedirectResult(auth).catch((error) => {\n      console.error('Google sign-in redirect error:', error);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const signInWithEmail = async (email: string, password: string) => {\n    await signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const signUpWithEmail = async (email: string, password: string, displayName: string) => {\n    const { user } = await createUserWithEmailAndPassword(auth, email, password);\n    await updateProfile(user, { displayName });\n  };\n\n  const signInWithGoogle = async () => {\n    await signInWithRedirect(auth, googleProvider);\n  };\n\n  const logout = async () => {\n    await signOut(auth);\n  };\n\n  const updateUserProfile = async (displayName: string, photoURL?: string) => {\n    if (currentUser) {\n      await updateProfile(currentUser, { displayName, photoURL });\n    }\n  };\n\n  const value = {\n    currentUser,\n    userData,\n    loading,\n    signInWithEmail,\n    signUpWithEmail,\n    signInWithGoogle,\n    logout,\n    updateUserProfile,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n","size_bytes":3935},"client/src/contexts/theme-context.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setThemeState] = useState<Theme>(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    return stored || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === \"dark\") {\n      root.classList.add(\"dark\");\n    } else {\n      root.classList.remove(\"dark\");\n    }\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setThemeState((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n  };\n\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme,\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n","size_bytes":1358},"client/src/data/experience-levels.ts":{"content":"import { ExperienceLevel } from \"@shared/schema\";\n\nexport interface ExperienceLevelInfo {\n  id: ExperienceLevel;\n  title: string;\n  description: string;\n  features: string[];\n  icon: string;\n  color: string;\n  templateCount: number;\n  popular?: boolean;\n}\n\nexport const experienceLevels: ExperienceLevelInfo[] = [\n  {\n    id: \"beginner\",\n    title: \"Beginner\",\n    description: \"Fresh graduates and entry-level professionals starting their career journey\",\n    features: [\n      \"5 beginner-friendly templates\",\n      \"Step-by-step guidance\",\n      \"Skills highlighting tips\",\n      \"Entry-level formatting\"\n    ],\n    icon: \"🌱\",\n    color: \"accent\",\n    templateCount: 5,\n  },\n  {\n    id: \"mid-career\",\n    title: \"Mid-Career\",\n    description: \"Experienced professionals looking to advance their career\",\n    features: [\n      \"6 professional templates\",\n      \"Achievement optimization\",\n      \"Leadership focus sections\",\n      \"Career transition support\"\n    ],\n    icon: \"📈\",\n    color: \"primary\",\n    templateCount: 6,\n    popular: true,\n  },\n  {\n    id: \"professional\",\n    title: \"Professional\",\n    description: \"Senior executives and industry leaders showcasing expertise\",\n    features: [\n      \"4 executive templates\",\n      \"Executive summary focus\",\n      \"Strategic accomplishments\",\n      \"Board-ready formatting\"\n    ],\n    icon: \"👑\",\n    color: \"secondary\",\n    templateCount: 4,\n  },\n];\n\nexport const getExperienceLevelInfo = (level: ExperienceLevel): ExperienceLevelInfo | undefined => {\n  return experienceLevels.find(el => el.id === level);\n};\n","size_bytes":1576},"client/src/data/resume-templates.ts":{"content":"import { TemplateCategory, ExperienceLevel } from \"@shared/schema\";\n\nexport interface ResumeTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: TemplateCategory;\n  experienceLevel: ExperienceLevel[];\n  rating: number;\n  preview: string;\n  colors: {\n    primary: string;\n    secondary: string;\n    accent: string;\n  };\n  features: string[];\n  popular?: boolean;\n}\n\nexport const resumeTemplates: ResumeTemplate[] = [\n  // Professional Templates - Beginner\n  {\n    id: \"professional-classic\",\n    name: \"Classic Professional\",\n    description: \"Clean and traditional design perfect for conservative industries\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-blue-50 to-blue-100\",\n    colors: {\n      primary: \"hsl(210, 100%, 50%)\",\n      secondary: \"hsl(210, 15%, 25%)\",\n      accent: \"hsl(210, 100%, 95%)\"\n    },\n    features: [\"ATS-optimized\", \"Clean layout\", \"Easy to read\"],\n  },\n  {\n    id: \"professional-minimal\",\n    name: \"Minimal Professional\",\n    description: \"Simple and elegant design focusing on content clarity\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-gray-50 to-gray-100\",\n    colors: {\n      primary: \"hsl(0, 0%, 20%)\",\n      secondary: \"hsl(0, 0%, 40%)\",\n      accent: \"hsl(0, 0%, 95%)\"\n    },\n    features: [\"Minimalist design\", \"Great typography\", \"Space efficient\"],\n  },\n  {\n    id: \"professional-modern\",\n    name: \"Modern Professional\",\n    description: \"Contemporary design with subtle modern touches\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-slate-50 to-slate-100\",\n    colors: {\n      primary: \"hsl(215, 25%, 27%)\",\n      secondary: \"hsl(215, 15%, 50%)\",\n      accent: \"hsl(215, 100%, 96%)\"\n    },\n    features: [\"Modern styling\", \"Professional layout\", \"Balanced design\"],\n  },\n  {\n    id: \"professional-corporate\",\n    name: \"Corporate Professional\",\n    description: \"Formal design ideal for corporate environments\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-blue-50 to-indigo-50\",\n    colors: {\n      primary: \"hsl(225, 73%, 57%)\",\n      secondary: \"hsl(225, 25%, 35%)\",\n      accent: \"hsl(225, 100%, 97%)\"\n    },\n    features: [\"Corporate styling\", \"Professional hierarchy\", \"Trust-building\"],\n  },\n  {\n    id: \"professional-executive-entry\",\n    name: \"Executive Entry\",\n    description: \"Entry-level executive style for ambitious professionals\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\"],\n    rating: 4.6,\n    preview: \"bg-gradient-to-br from-emerald-50 to-teal-50\",\n    colors: {\n      primary: \"hsl(160, 84%, 39%)\",\n      secondary: \"hsl(160, 25%, 35%)\",\n      accent: \"hsl(160, 100%, 97%)\"\n    },\n    features: [\"Executive styling\", \"Growth-oriented\", \"Professional impact\"],\n  },\n\n  // Professional Templates - Mid-Career\n  {\n    id: \"professional-leadership\",\n    name: \"Leadership Professional\",\n    description: \"Designed to highlight management and leadership experience\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-violet-50 to-purple-100\",\n    colors: {\n      primary: \"hsl(262, 83%, 58%)\",\n      secondary: \"hsl(262, 25%, 35%)\",\n      accent: \"hsl(262, 100%, 97%)\"\n    },\n    features: [\"Leadership focus\", \"Achievement highlights\", \"Impact-driven\"],\n    popular: true,\n  },\n  {\n    id: \"professional-strategic\",\n    name: \"Strategic Professional\",\n    description: \"Perfect for strategic roles and senior positions\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-rose-50 to-pink-100\",\n    colors: {\n      primary: \"hsl(350, 89%, 60%)\",\n      secondary: \"hsl(350, 25%, 35%)\",\n      accent: \"hsl(350, 100%, 97%)\"\n    },\n    features: [\"Strategic thinking\", \"Results-oriented\", \"Executive presence\"],\n  },\n  {\n    id: \"professional-growth\",\n    name: \"Growth Professional\",\n    description: \"Showcases career progression and growth achievements\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-orange-50 to-amber-100\",\n    colors: {\n      primary: \"hsl(43, 96%, 56%)\",\n      secondary: \"hsl(43, 25%, 35%)\",\n      accent: \"hsl(43, 100%, 97%)\"\n    },\n    features: [\"Growth trajectory\", \"Achievement metrics\", \"Career progression\"],\n  },\n  {\n    id: \"professional-senior\",\n    name: \"Senior Professional\",\n    description: \"Mature design for experienced professionals\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-cyan-50 to-blue-100\",\n    colors: {\n      primary: \"hsl(200, 98%, 39%)\",\n      secondary: \"hsl(200, 25%, 35%)\",\n      accent: \"hsl(200, 100%, 97%)\"\n    },\n    features: [\"Senior positioning\", \"Experience-focused\", \"Industry authority\"],\n  },\n  {\n    id: \"professional-director\",\n    name: \"Director Professional\",\n    description: \"Director-level template with strong visual hierarchy\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-teal-50 to-emerald-100\",\n    colors: {\n      primary: \"hsl(158, 64%, 52%)\",\n      secondary: \"hsl(158, 25%, 35%)\",\n      accent: \"hsl(158, 100%, 97%)\"\n    },\n    features: [\"Director presence\", \"Team leadership\", \"Strategic impact\"],\n  },\n  {\n    id: \"professional-consultant\",\n    name: \"Consultant Professional\",\n    description: \"Consulting-focused template highlighting expertise\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-indigo-50 to-blue-100\",\n    colors: {\n      primary: \"hsl(220, 91%, 62%)\",\n      secondary: \"hsl(220, 25%, 35%)\",\n      accent: \"hsl(220, 100%, 97%)\"\n    },\n    features: [\"Consulting expertise\", \"Problem-solving\", \"Client results\"],\n  },\n\n  // Professional Templates - Professional/Executive\n  {\n    id: \"professional-ceo\",\n    name: \"CEO Executive\",\n    description: \"Executive-level template for C-suite professionals\",\n    category: \"professional\",\n    experienceLevel: [\"professional\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-stone-100 to-neutral-200\",\n    colors: {\n      primary: \"hsl(24, 6%, 10%)\",\n      secondary: \"hsl(24, 5%, 40%)\",\n      accent: \"hsl(24, 10%, 95%)\"\n    },\n    features: [\"C-suite presence\", \"Board-ready\", \"Executive summary\"],\n  },\n  {\n    id: \"professional-vp\",\n    name: \"VP Executive\",\n    description: \"Vice President level template with strong authority\",\n    category: \"professional\",\n    experienceLevel: [\"professional\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-zinc-50 to-gray-100\",\n    colors: {\n      primary: \"hsl(210, 11%, 15%)\",\n      secondary: \"hsl(210, 6%, 45%)\",\n      accent: \"hsl(210, 17%, 95%)\"\n    },\n    features: [\"VP authority\", \"Strategic vision\", \"Organizational impact\"],\n  },\n  {\n    id: \"professional-cfo\",\n    name: \"CFO Executive\",\n    description: \"Financial executive template emphasizing fiscal leadership\",\n    category: \"professional\",\n    experienceLevel: [\"professional\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-green-50 to-emerald-100\",\n    colors: {\n      primary: \"hsl(142, 71%, 45%)\",\n      secondary: \"hsl(142, 25%, 35%)\",\n      accent: \"hsl(142, 76%, 96%)\"\n    },\n    features: [\"Financial leadership\", \"P&L responsibility\", \"Fiscal strategy\"],\n  },\n  {\n    id: \"professional-cto\",\n    name: \"CTO Executive\",\n    description: \"Technology executive template for tech leaders\",\n    category: \"professional\",\n    experienceLevel: [\"professional\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-blue-50 to-cyan-100\",\n    colors: {\n      primary: \"hsl(193, 95%, 46%)\",\n      secondary: \"hsl(193, 25%, 35%)\",\n      accent: \"hsl(193, 100%, 97%)\"\n    },\n    features: [\"Tech leadership\", \"Innovation focus\", \"Digital transformation\"],\n  },\n\n  // Creative Templates\n  {\n    id: \"creative-designer\",\n    name: \"Creative Designer\",\n    description: \"Perfect for designers and creative professionals\",\n    category: \"creative\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-purple-50 to-pink-100\",\n    colors: {\n      primary: \"hsl(291, 64%, 42%)\",\n      secondary: \"hsl(291, 25%, 35%)\",\n      accent: \"hsl(291, 75%, 96%)\"\n    },\n    features: [\"Creative layout\", \"Portfolio focus\", \"Visual appeal\"],\n  },\n  {\n    id: \"creative-artist\",\n    name: \"Creative Artist\",\n    description: \"Artistic template for creative professionals\",\n    category: \"creative\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-pink-50 to-rose-100\",\n    colors: {\n      primary: \"hsl(330, 81%, 60%)\",\n      secondary: \"hsl(330, 25%, 35%)\",\n      accent: \"hsl(330, 100%, 97%)\"\n    },\n    features: [\"Artistic expression\", \"Creative freedom\", \"Personal branding\"],\n  },\n\n  // Modern Templates\n  {\n    id: \"modern-tech\",\n    name: \"Modern Tech\",\n    description: \"Contemporary design optimized for tech industry\",\n    category: \"modern\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-orange-50 to-red-100\",\n    colors: {\n      primary: \"hsl(16, 100%, 60%)\",\n      secondary: \"hsl(16, 25%, 35%)\",\n      accent: \"hsl(16, 100%, 97%)\"\n    },\n    features: [\"Tech-optimized\", \"Modern styling\", \"Innovation focus\"],\n    popular: true,\n  },\n  {\n    id: \"modern-startup\",\n    name: \"Modern Startup\",\n    description: \"Dynamic template for startup professionals\",\n    category: \"modern\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-lime-50 to-green-100\",\n    colors: {\n      primary: \"hsl(84, 81%, 44%)\",\n      secondary: \"hsl(84, 25%, 35%)\",\n      accent: \"hsl(84, 90%, 97%)\"\n    },\n    features: [\"Startup energy\", \"Growth mindset\", \"Innovation ready\"],\n  },\n  {\n    id: \"creative-photographer\",\n    name: \"Creative Photographer\",\n    description: \"Visual-focused template for photographers and visual artists\",\n    category: \"creative\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-amber-50 to-yellow-100\",\n    colors: {\n      primary: \"hsl(45, 93%, 47%)\",\n      secondary: \"hsl(45, 25%, 35%)\",\n      accent: \"hsl(45, 100%, 97%)\"\n    },\n    features: [\"Portfolio showcase\", \"Visual hierarchy\", \"Creative layout\"],\n  },\n  {\n    id: \"creative-marketer\",\n    name: \"Creative Marketing\",\n    description: \"Marketing-focused template with creative flair\",\n    category: \"creative\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-violet-50 to-indigo-100\",\n    colors: {\n      primary: \"hsl(243, 75%, 59%)\",\n      secondary: \"hsl(243, 25%, 35%)\",\n      accent: \"hsl(243, 100%, 97%)\"\n    },\n    features: [\"Campaign highlights\", \"Metrics focus\", \"Brand storytelling\"],\n  },\n  {\n    id: \"creative-content\",\n    name: \"Content Creator\",\n    description: \"Perfect for content creators and social media professionals\",\n    category: \"creative\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.6,\n    preview: \"bg-gradient-to-br from-emerald-50 to-teal-100\",\n    colors: {\n      primary: \"hsl(158, 64%, 52%)\",\n      secondary: \"hsl(158, 25%, 35%)\",\n      accent: \"hsl(158, 100%, 97%)\"\n    },\n    features: [\"Content portfolio\", \"Engagement metrics\", \"Multi-platform\"],\n  },\n  {\n    id: \"modern-data\",\n    name: \"Modern Data Science\",\n    description: \"Data-driven template for data scientists and analysts\",\n    category: \"modern\",\n    experienceLevel: [\"mid-career\", \"professional\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-blue-50 to-cyan-100\",\n    colors: {\n      primary: \"hsl(195, 100%, 42%)\",\n      secondary: \"hsl(195, 25%, 35%)\",\n      accent: \"hsl(195, 100%, 97%)\"\n    },\n    features: [\"Data visualization\", \"Analytics focus\", \"Technical skills\"],\n    popular: true,\n  },\n  {\n    id: \"modern-product\",\n    name: \"Modern Product Manager\",\n    description: \"Product management template highlighting user impact\",\n    category: \"modern\",\n    experienceLevel: [\"mid-career\", \"professional\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-purple-50 to-pink-100\",\n    colors: {\n      primary: \"hsl(320, 65%, 52%)\",\n      secondary: \"hsl(320, 25%, 35%)\",\n      accent: \"hsl(320, 100%, 97%)\"\n    },\n    features: [\"Product metrics\", \"User experience\", \"Growth results\"],\n  },\n  {\n    id: \"modern-freelancer\",\n    name: \"Modern Freelancer\",\n    description: \"Flexible template for freelancers and consultants\",\n    category: \"modern\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.7,\n    preview: \"bg-gradient-to-br from-red-50 to-orange-100\",\n    colors: {\n      primary: \"hsl(14, 100%, 57%)\",\n      secondary: \"hsl(14, 25%, 35%)\",\n      accent: \"hsl(14, 100%, 97%)\"\n    },\n    features: [\"Client results\", \"Flexible sections\", \"Project showcase\"],\n  },\n  {\n    id: \"professional-healthcare\",\n    name: \"Healthcare Professional\",\n    description: \"Medical and healthcare professional template\",\n    category: \"professional\",\n    experienceLevel: [\"mid-career\", \"professional\"],\n    rating: 4.9,\n    preview: \"bg-gradient-to-br from-green-50 to-emerald-100\",\n    colors: {\n      primary: \"hsl(142, 71%, 45%)\",\n      secondary: \"hsl(142, 25%, 35%)\",\n      accent: \"hsl(142, 76%, 96%)\"\n    },\n    features: [\"Medical credentials\", \"Patient focus\", \"Healthcare excellence\"],\n  },\n  {\n    id: \"professional-education\",\n    name: \"Education Professional\",\n    description: \"Template for educators and academic professionals\",\n    category: \"professional\",\n    experienceLevel: [\"beginner\", \"mid-career\"],\n    rating: 4.8,\n    preview: \"bg-gradient-to-br from-indigo-50 to-blue-100\",\n    colors: {\n      primary: \"hsl(220, 91%, 62%)\",\n      secondary: \"hsl(220, 25%, 35%)\",\n      accent: \"hsl(220, 100%, 97%)\"\n    },\n    features: [\"Teaching excellence\", \"Student outcomes\", \"Academic achievements\"],\n  },\n];\n\nexport const getTemplatesByExperienceLevel = (level: ExperienceLevel): ResumeTemplate[] => {\n  return resumeTemplates.filter(template => \n    template.experienceLevel.includes(level)\n  );\n};\n\nexport const getTemplatesByCategory = (category: TemplateCategory): ResumeTemplate[] => {\n  return resumeTemplates.filter(template => template.category === category);\n};\n\nexport const getTemplate = (id: string): ResumeTemplate | undefined => {\n  return resumeTemplates.find(template => template.id === id);\n};\n\nexport const getPopularTemplates = (): ResumeTemplate[] => {\n  return resumeTemplates.filter(template => template.popular);\n};\n","size_bytes":14827},"client/src/hooks/use-auth.ts":{"content":"import { useAuth as useAuthContext } from \"@/contexts/auth-context\";\n\nexport const useAuth = useAuthContext;\n","size_bytes":109},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-key\",\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"resumecraft-demo\"}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"resumecraft-demo\",\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"resumecraft-demo\"}.firebasestorage.app`,\n  messagingSenderId: \"123456789\",\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"demo-app-id\",\n};\n\nexport const app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\n\n// Google Auth Provider\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('email');\ngoogleProvider.addScope('profile');\n\nexport default app;\n","size_bytes":924},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { UserDashboard } from \"@/components/dashboard/user-dashboard\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { currentUser, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !currentUser) {\n      setLocation(\"/\");\n    }\n  }, [currentUser, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading your dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentUser) {\n    return null; // Will redirect to home\n  }\n\n  return <UserDashboard />;\n}\n","size_bytes":941},"client/src/pages/experience-selector.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { AuthDialog } from \"@/components/auth/auth-dialog\";\nimport { experienceLevels } from \"@/data/experience-levels\";\nimport { getTemplatesByExperienceLevel } from \"@/data/resume-templates\";\nimport { ExperienceLevel } from \"@shared/schema\";\nimport { \n  ArrowLeft, \n  ArrowRight, \n  CheckCircle, \n  FileText, \n  Briefcase, \n  GraduationCap,\n  Crown,\n  Sparkles,\n  Users,\n  TrendingUp\n} from \"lucide-react\";\n\nexport default function ExperienceSelector() {\n  const [selectedLevel, setSelectedLevel] = useState<ExperienceLevel | null>(null);\n  const [authOpen, setAuthOpen] = useState(false);\n  const { currentUser } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const handleLevelSelect = (level: ExperienceLevel) => {\n    setSelectedLevel(level);\n  };\n\n  const handleContinue = () => {\n    if (!selectedLevel) return;\n\n    if (!currentUser) {\n      setAuthOpen(true);\n      return;\n    }\n\n    // Navigate to template selection or resume builder\n    setLocation(`/resume-builder?level=${selectedLevel}`);\n  };\n\n  const handleBack = () => {\n    setLocation(\"/\");\n  };\n\n  const getSelectedTemplates = () => {\n    if (!selectedLevel) return [];\n    return getTemplatesByExperienceLevel(selectedLevel);\n  };\n\n  const getLevelIcon = (levelId: ExperienceLevel) => {\n    switch (levelId) {\n      case \"beginner\":\n        return <GraduationCap className=\"w-8 h-8\" />;\n      case \"mid-career\":\n        return <Briefcase className=\"w-8 h-8\" />;\n      case \"professional\":\n        return <Crown className=\"w-8 h-8\" />;\n      default:\n        return <FileText className=\"w-8 h-8\" />;\n    }\n  };\n\n  const getLevelColor = (levelId: ExperienceLevel) => {\n    switch (levelId) {\n      case \"beginner\":\n        return \"from-accent/20 to-accent/5 border-accent/30\";\n      case \"mid-career\":\n        return \"from-primary/20 to-primary/5 border-primary/30\";\n      case \"professional\":\n        return \"from-secondary/20 to-secondary/5 border-secondary/30\";\n      default:\n        return \"from-muted/20 to-muted/5 border-muted/30\";\n    }\n  };\n\n  const getStats = () => {\n    const templates = getSelectedTemplates();\n    const categories = [...new Set(templates.map(t => t.category))];\n    const avgRating = templates.reduce((sum, t) => sum + t.rating, 0) / templates.length || 0;\n\n    return {\n      templates: templates.length,\n      categories: categories.length,\n      avgRating: avgRating.toFixed(1)\n    };\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-card\">\n        <div className=\"max-w-4xl mx-auto px-6 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <Button\n              variant=\"ghost\"\n              onClick={handleBack}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4\" />\n              <span>Back to Home</span>\n            </Button>\n            \n            {currentUser && (\n              <div className=\"text-sm text-muted-foreground\">\n                Signed in as {currentUser.displayName || currentUser.email}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-4xl mx-auto px-6 py-12\">\n        {/* Page Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-6\">\n            <TrendingUp className=\"w-8 h-8 text-primary\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-foreground mb-4\">\n            Choose Your Experience Level\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            Select your career stage to get personalized templates and guidance tailored to your professional level\n          </p>\n        </div>\n\n        {/* Experience Level Cards */}\n        <div className=\"grid gap-8 mb-12\">\n          {experienceLevels.map((level) => (\n            <Card\n              key={level.id}\n              className={`cursor-pointer transition-all duration-200 hover:shadow-lg hover:-translate-y-1 ${\n                selectedLevel === level.id\n                  ? `ring-2 ring-primary shadow-lg bg-gradient-to-br ${getLevelColor(level.id)}`\n                  : 'hover:ring-1 hover:ring-border'\n              } ${level.popular ? 'relative' : ''}`}\n              onClick={() => handleLevelSelect(level.id)}\n              data-testid={`card-level-${level.id}`}\n            >\n              {level.popular && (\n                <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                  <Badge className=\"bg-primary text-primary-foreground px-4 py-1 shadow-md\">\n                    <Sparkles className=\"w-3 h-3 mr-1\" />\n                    Most Popular\n                  </Badge>\n                </div>\n              )}\n\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-start space-x-6\">\n                  {/* Icon */}\n                  <div className={`w-16 h-16 bg-gradient-to-br ${getLevelColor(level.id)} rounded-xl flex items-center justify-center flex-shrink-0 ${\n                    selectedLevel === level.id ? 'text-primary' : 'text-muted-foreground'\n                  }`}>\n                    {getLevelIcon(level.id)}\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <h3 className=\"text-2xl font-bold text-foreground\">\n                        {level.title}\n                      </h3>\n                      {selectedLevel === level.id && (\n                        <CheckCircle className=\"w-6 h-6 text-primary\" />\n                      )}\n                    </div>\n\n                    <p className=\"text-muted-foreground text-lg mb-6\">\n                      {level.description}\n                    </p>\n\n                    {/* Features */}\n                    <div className=\"grid sm:grid-cols-2 gap-3 mb-6\">\n                      {level.features.map((feature, index) => (\n                        <div key={index} className=\"flex items-center space-x-2\">\n                          <div className=\"w-2 h-2 bg-secondary rounded-full flex-shrink-0\" />\n                          <span className=\"text-sm text-foreground\">{feature}</span>\n                        </div>\n                      ))}\n                    </div>\n\n                    {/* Stats */}\n                    <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n                      <div className=\"flex items-center space-x-1\">\n                        <FileText className=\"w-4 h-4\" />\n                        <span>{level.templateCount} templates</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Users className=\"w-4 h-4\" />\n                        <span>Proven effective</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Selected Level Preview */}\n        {selectedLevel && (\n          <Card className=\"mb-8 bg-gradient-to-r from-primary/5 to-secondary/5 border-primary/20\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Sparkles className=\"w-5 h-5 text-primary\" />\n                <span>What You'll Get with {experienceLevels.find(l => l.id === selectedLevel)?.title}</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid sm:grid-cols-3 gap-6 text-center\">\n                <div>\n                  <div className=\"text-2xl font-bold text-primary mb-1\">\n                    {getStats().templates}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Professional Templates\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-secondary mb-1\">\n                    {getStats().categories}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Design Categories\n                  </div>\n                </div>\n                <div>\n                  <div className=\"text-2xl font-bold text-accent mb-1\">\n                    {getStats().avgRating}★\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Average Rating\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Continue Button */}\n        <div className=\"text-center\">\n          <Button\n            onClick={handleContinue}\n            disabled={!selectedLevel}\n            size=\"lg\"\n            className=\"px-8 py-4 text-lg font-semibold bg-primary text-primary-foreground hover:bg-primary/90 disabled:opacity-50\"\n            data-testid=\"button-continue\"\n          >\n            {currentUser ? (\n              <>\n                Continue to Templates\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </>\n            ) : (\n              <>\n                Sign Up to Continue\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </>\n            )}\n          </Button>\n          \n          {!selectedLevel && (\n            <p className=\"text-sm text-muted-foreground mt-3\">\n              Please select your experience level to continue\n            </p>\n          )}\n\n          {!currentUser && (\n            <p className=\"text-sm text-muted-foreground mt-3\">\n              You'll need to create an account to save your progress\n            </p>\n          )}\n        </div>\n      </div>\n\n      <AuthDialog\n        isOpen={authOpen}\n        onClose={() => setAuthOpen(false)}\n        initialMode=\"signup\"\n      />\n    </div>\n  );\n}\n","size_bytes":10400},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AuthDialog } from \"@/components/auth/auth-dialog\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { experienceLevels } from \"@/data/experience-levels\";\nimport { getPopularTemplates } from \"@/data/resume-templates\";\nimport { \n  FileText, \n  Rocket, \n  Star, \n  Users, \n  Download, \n  BarChart3,\n  Eye,\n  ArrowUpDown,\n  FileDown,\n  Cloud,\n  TrendingUp,\n  Zap,\n  Shield,\n  ChevronRight,\n  Sparkles\n} from \"lucide-react\";\n\nexport default function Home() {\n  const [authOpen, setAuthOpen] = useState(false);\n  const [authMode, setAuthMode] = useState<\"login\" | \"signup\">(\"login\");\n  const [, setLocation] = useLocation();\n  const { currentUser } = useAuth();\n\n  const popularTemplates = getPopularTemplates();\n\n  const handleGetStarted = () => {\n    if (currentUser) {\n      setLocation(\"/experience-selector\");\n    } else {\n      setAuthMode(\"signup\");\n      setAuthOpen(true);\n    }\n  };\n\n  const handleSignIn = () => {\n    setAuthMode(\"login\");\n    setAuthOpen(true);\n  };\n\n  const features = [\n    {\n      icon: <BarChart3 className=\"w-6 h-6\" />,\n      title: \"Real-time ATS Scoring\",\n      description: \"Get instant feedback on your resume's ATS compatibility with our AI-powered scoring system. 5 attempts per resume for optimization.\",\n      highlight: \"5 optimization attempts included\"\n    },\n    {\n      icon: <Eye className=\"w-6 h-6\" />,\n      title: \"Live Preview Editing\",\n      description: \"See your changes instantly with real-time preview. Switch between templates and see immediate results.\",\n      highlight: \"Instant template switching\"\n    },\n    {\n      icon: <ArrowUpDown className=\"w-6 h-6\" />,\n      title: \"Drag & Drop Sections\",\n      description: \"Easily rearrange resume sections with intuitive drag-and-drop functionality. Customize your layout effortlessly.\",\n      highlight: \"Flexible section ordering\"\n    },\n    {\n      icon: <FileDown className=\"w-6 h-6\" />,\n      title: \"Professional PDF Export\",\n      description: \"Export high-quality, ATS-friendly PDFs that maintain formatting across all devices and platforms.\",\n      highlight: \"High-quality formatting\"\n    },\n    {\n      icon: <Cloud className=\"w-6 h-6\" />,\n      title: \"Cloud Storage & Sync\",\n      description: \"Access your resumes from anywhere with secure cloud storage powered by Firebase. Never lose your work.\",\n      highlight: \"Automatic backup & sync\"\n    },\n    {\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      title: \"Analytics Dashboard\",\n      description: \"Track your resume performance, ATS scores, and editing history with comprehensive analytics.\",\n      highlight: \"Performance insights\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation */}\n      <nav className=\"sticky top-0 z-50 bg-white/95 dark:bg-background/95 backdrop-blur-md border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                <FileText className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-2xl font-bold text-foreground\">ResumeCraft</span>\n            </div>\n\n            <div className=\"hidden md:flex items-center space-x-8\">\n              <a href=\"#templates\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Templates\n              </a>\n              <a href=\"#features\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                Features\n              </a>\n              {currentUser ? (\n                <Button\n                  onClick={() => setLocation(\"/dashboard\")}\n                  variant=\"default\"\n                  data-testid=\"button-dashboard\"\n                >\n                  Dashboard\n                </Button>\n              ) : (\n                <>\n                  <Button\n                    variant=\"ghost\"\n                    onClick={handleSignIn}\n                    data-testid=\"button-signin-nav\"\n                  >\n                    Sign In\n                  </Button>\n                  <Button\n                    onClick={handleGetStarted}\n                    data-testid=\"button-getstarted-nav\"\n                  >\n                    Get Started\n                  </Button>\n                </>\n              )}\n            </div>\n\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className=\"md:hidden\"\n              data-testid=\"button-mobile-menu\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              </svg>\n            </Button>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden py-24 bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/10\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-secondary/10 opacity-50\" />\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div className=\"space-y-8\">\n              <div className=\"space-y-4\">\n                <h1 className=\"text-5xl lg:text-6xl font-bold text-foreground leading-tight\">\n                  Build Your Dream Resume with{\" \"}\n                  <span className=\"bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent\">\n                    AI-Powered\n                  </span>{\" \"}\n                  ATS Scoring\n                </h1>\n                <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                  Create professional resumes with 15+ templates, real-time ATS scoring, and live editing. \n                  Stand out from the crowd with ResumeCraft's intelligent resume builder.\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <Button\n                  size=\"lg\"\n                  className=\"px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n                  onClick={handleGetStarted}\n                  data-testid=\"button-start-building\"\n                >\n                  <Rocket className=\"w-5 h-5 mr-2\" />\n                  Start Building for Free\n                </Button>\n                \n                <div className=\"flex flex-wrap items-center gap-8 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Users className=\"w-4 h-4 text-secondary\" />\n                    <span>50,000+ users</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Star className=\"w-4 h-4 text-accent fill-accent\" />\n                    <span>4.9/5 rating</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Download className=\"w-4 h-4 text-destructive\" />\n                    <span>100,000+ downloads</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"relative\">\n              <div className=\"relative bg-white dark:bg-card rounded-2xl shadow-2xl p-6 transform rotate-2 hover:rotate-0 transition-transform duration-300\">\n                <div className=\"absolute -top-4 -right-4 bg-secondary text-secondary-foreground rounded-lg px-4 py-2 shadow-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\" />\n                    <span className=\"text-sm font-medium\">ATS Score: 95%</span>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-secondary rounded-full flex items-center justify-center\">\n                      <span className=\"text-white font-semibold\">JD</span>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">John Doe</h3>\n                      <p className=\"text-sm text-muted-foreground\">Senior Software Engineer</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"h-2 bg-muted rounded w-full\" />\n                    <div className=\"h-2 bg-muted rounded w-3/4\" />\n                    <div className=\"h-2 bg-muted rounded w-5/6\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"font-medium text-foreground\">Experience</h4>\n                    <div className=\"space-y-1\">\n                      <div className=\"h-1.5 bg-primary/20 rounded w-full\" />\n                      <div className=\"h-1.5 bg-primary/20 rounded w-4/5\" />\n                      <div className=\"h-1.5 bg-primary/20 rounded w-3/5\" />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"absolute -bottom-4 -left-4 bg-accent text-accent-foreground rounded-lg px-4 py-2 shadow-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Download className=\"w-3 h-3\" />\n                    <span className=\"text-sm font-medium\">Ready to Export</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Experience Level Selection */}\n      <section className=\"py-20 bg-muted/30\" id=\"experience\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">Choose Your Experience Level</h2>\n            <p className=\"text-xl text-muted-foreground\">Get personalized templates and guidance based on your career stage</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {experienceLevels.map((level) => (\n              <Card \n                key={level.id} \n                className={`hover:shadow-lg transition-all duration-200 hover:-translate-y-1 cursor-pointer ${\n                  level.popular ? 'ring-2 ring-primary relative' : ''\n                }`}\n                data-testid={`card-experience-${level.id}`}\n              >\n                {level.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-primary text-primary-foreground px-4 py-1\">\n                      Popular\n                    </Badge>\n                  </div>\n                )}\n                <CardContent className=\"p-8\">\n                  <div className={`w-16 h-16 bg-${level.color}/10 rounded-xl flex items-center justify-center mb-6`}>\n                    <span className=\"text-3xl\">{level.icon}</span>\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-foreground mb-4\">{level.title}</h3>\n                  <p className=\"text-muted-foreground mb-6\">{level.description}</p>\n                  \n                  <ul className=\"space-y-2 mb-8\">\n                    {level.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-center space-x-2\">\n                        <div className=\"w-2 h-2 bg-secondary rounded-full\" />\n                        <span className=\"text-sm text-foreground\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  \n                  <Button \n                    className={`w-full bg-${level.color} text-${level.color}-foreground hover:bg-${level.color}/90`}\n                    onClick={() => setLocation(`/templates?level=${level.id}`)}\n                    data-testid={`button-select-${level.id}`}\n                  >\n                    Select {level.title}\n                    <ChevronRight className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Template Showcase */}\n      <section id=\"templates\" className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">15+ Professional Resume Templates</h2>\n            <p className=\"text-xl text-muted-foreground mb-8\">Choose from our curated collection of ATS-optimized templates</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            {popularTemplates.slice(0, 4).map((template) => (\n              <Card \n                key={template.id} \n                className=\"group cursor-pointer hover:shadow-lg transition-all duration-200 hover:-translate-y-1\"\n                data-testid={`card-template-${template.id}`}\n              >\n                <div className={`aspect-[3/4] ${template.preview} p-4 rounded-t-lg`}>\n                  <div className=\"bg-white dark:bg-card rounded p-3 shadow-sm h-full flex flex-col justify-between\">\n                    <div className=\"space-y-2\">\n                      <div \n                        className=\"h-2 rounded\" \n                        style={{ backgroundColor: template.colors.primary }}\n                      />\n                      <div className=\"h-1 bg-gray-300 dark:bg-gray-600 rounded w-3/4\" />\n                      <div className=\"h-1 bg-gray-300 dark:bg-gray-600 rounded w-1/2\" />\n                    </div>\n                    <div className=\"space-y-1\">\n                      <div className=\"h-1 bg-gray-300 dark:bg-gray-600 rounded\" />\n                      <div className=\"h-1 bg-gray-300 dark:bg-gray-600 rounded w-4/5\" />\n                      <div className=\"h-1 bg-gray-300 dark:bg-gray-600 rounded w-3/5\" />\n                    </div>\n                  </div>\n                </div>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-foreground mb-1\">{template.name}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">{template.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      {template.category}\n                    </Badge>\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-3 h-3 text-accent fill-accent\" />\n                      <span className=\"text-xs text-muted-foreground\">{template.rating}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              onClick={() => setLocation(\"/templates\")}\n              data-testid=\"button-view-all-templates\"\n            >\n              View All Templates\n              <ChevronRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">Powerful Features for Resume Success</h2>\n            <p className=\"text-xl text-muted-foreground\">Everything you need to create, optimize, and track your resume performance</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <Card \n                key={index}\n                className=\"hover:shadow-lg transition-all duration-200 hover:-translate-y-1\"\n                data-testid={`card-feature-${index}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mb-4 text-primary\">\n                    {feature.icon}\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-foreground mb-3\">{feature.title}</h3>\n                  <p className=\"text-muted-foreground mb-4\">{feature.description}</p>\n                  <div className=\"flex items-center space-x-2 text-sm text-secondary\">\n                    <Sparkles className=\"w-4 h-4\" />\n                    <span>{feature.highlight}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary to-secondary\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          <h2 className=\"text-4xl lg:text-5xl font-bold text-white mb-6\">\n            Ready to Build Your Perfect Resume?\n          </h2>\n          <p className=\"text-xl text-white/90 mb-8\">\n            Join thousands of professionals who've landed their dream jobs with ResumeCraft's AI-powered resume builder.\n          </p>\n\n          <div className=\"space-y-4\">\n            <Button\n              size=\"lg\"\n              variant=\"secondary\"\n              className=\"px-8 py-4 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200\"\n              onClick={handleGetStarted}\n              data-testid=\"button-start-building-cta\"\n            >\n              <Rocket className=\"w-5 h-5 mr-2\" />\n              Start Building for Free\n            </Button>\n            <p className=\"text-white/80 text-sm\">\n              No credit card required • 15+ templates included • ATS optimization\n            </p>\n          </div>\n\n          <div className=\"mt-12 flex justify-center items-center space-x-8 text-white/70\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"w-4 h-4\" />\n              <span className=\"text-sm\">Secure & Private</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Users className=\"w-4 h-4\" />\n              <span className=\"text-sm\">50,000+ Users</span>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Star className=\"w-4 h-4\" />\n              <span className=\"text-sm\">4.9/5 Rating</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-foreground text-background py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-secondary rounded-lg flex items-center justify-center\">\n                  <FileText className=\"w-5 h-5 text-white\" />\n                </div>\n                <span className=\"text-xl font-bold\">ResumeCraft</span>\n              </div>\n              <p className=\"text-background/70 text-sm\">\n                Build professional resumes with AI-powered ATS scoring and real-time optimization.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-sm text-background/70\">\n                <li><a href=\"#templates\" className=\"hover:text-background transition-colors\">Templates</a></li>\n                <li><a href=\"#features\" className=\"hover:text-background transition-colors\">ATS Checker</a></li>\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Resume Builder</a></li>\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Cover Letters</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-sm text-background/70\">\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Help Center</a></li>\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Contact Us</a></li>\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Privacy Policy</a></li>\n                <li><a href=\"#\" className=\"hover:text-background transition-colors\">Terms of Service</a></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-4\">Connect</h4>\n              <div className=\"flex space-x-4\">\n                <a href=\"#\" className=\"w-8 h-8 bg-background/10 rounded flex items-center justify-center hover:bg-background/20 transition-colors\">\n                  <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84\" />\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-background/10 rounded flex items-center justify-center hover:bg-background/20 transition-colors\">\n                  <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\" />\n                  </svg>\n                </a>\n                <a href=\"#\" className=\"w-8 h-8 bg-background/10 rounded flex items-center justify-center hover:bg-background/20 transition-colors\">\n                  <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n                  </svg>\n                </a>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-background/20 mt-8 pt-8 text-center text-sm text-background/70\">\n            <p>&copy; 2024 ResumeCraft. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n\n      <AuthDialog\n        isOpen={authOpen}\n        onClose={() => setAuthOpen(false)}\n        initialMode={authMode}\n      />\n    </div>\n  );\n}\n","size_bytes":23881},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/resume-builder.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ResumeEditor } from \"@/components/resume/resume-editor\";\nimport { ResumePreview } from \"@/components/resume/resume-preview\";\nimport { TemplateSelector } from \"@/components/resume/template-selector\";\nimport { AtsScorerPanel } from \"@/components/resume/ats-scorer-panel\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Resume, ResumeContent, AtsFeedback, InsertResume } from \"@shared/schema\";\nimport { PdfExportService } from \"@/services/pdf-export\";\nimport { \n  Save, \n  Download, \n  Eye, \n  Settings, \n  BarChart3, \n  Palette,\n  ArrowLeft,\n  Loader2\n} from \"lucide-react\";\n\ninterface ResumeBuilderProps {\n  resumeId?: string;\n}\n\nexport default function ResumeBuilder({ resumeId }: ResumeBuilderProps) {\n  const { currentUser } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [, setLocation] = useLocation();\n\n  const [activeTab, setActiveTab] = useState(\"editor\");\n  const [isExporting, setIsExporting] = useState(false);\n  const [currentContent, setCurrentContent] = useState<ResumeContent>({\n    personalInfo: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      location: \"\",\n      website: \"\",\n      linkedin: \"\",\n      github: \"\",\n    },\n    summary: \"\",\n    experience: [],\n    education: [],\n    skills: [],\n    projects: [],\n    certifications: [],\n    languages: [],\n  });\n\n  const [selectedTemplateId, setSelectedTemplateId] = useState(\"professional-classic\");\n  const [resumeTitle, setResumeTitle] = useState(\"My Resume\");\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!currentUser) {\n      setLocation(\"/\");\n    }\n  }, [currentUser, setLocation]);\n\n  // Fetch existing resume if editing\n  const { data: resume, isLoading: resumeLoading } = useQuery<Resume>({\n    queryKey: [\"/api/resumes\", resumeId],\n    enabled: !!resumeId && !!currentUser,\n  });\n\n  // Initialize content when resume loads\n  useEffect(() => {\n    if (resume) {\n      setCurrentContent(resume.content);\n      setSelectedTemplateId(resume.templateId);\n      setResumeTitle(resume.title);\n    }\n  }, [resume]);\n\n  // Save resume mutation\n  const saveResumeMutation = useMutation({\n    mutationFn: async (data: { content: ResumeContent; templateId: string; title: string }) => {\n      if (resumeId) {\n        // Update existing resume\n        const response = await apiRequest(\"PUT\", `/api/resumes/${resumeId}`, data);\n        return response.json();\n      } else {\n        // Create new resume\n        const resumeData: InsertResume = {\n          ...data,\n          userId: currentUser!.uid,\n        };\n        const response = await apiRequest(\"POST\", \"/api/resumes\", resumeData);\n        return response.json();\n      }\n    },\n    onSuccess: (savedResume) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\"] });\n      if (!resumeId) {\n        // Navigate to the newly created resume\n        setLocation(`/resume-builder/${savedResume.id}`);\n      }\n      toast({\n        title: \"Resume saved\",\n        description: \"Your resume has been saved successfully.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Save failed\",\n        description: \"Failed to save resume. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Save error:\", error);\n    },\n  });\n\n  // ATS Analysis mutation\n  const atsAnalysisMutation = useMutation({\n    mutationFn: async (feedback: AtsFeedback) => {\n      if (!resumeId) throw new Error(\"Resume must be saved before ATS analysis\");\n      \n      const analysisData = {\n        resumeId,\n        score: feedback.overall.score,\n        feedback: feedback,\n        keywords: feedback.sections.keywords,\n        suggestions: Object.values(feedback.sections).flatMap(section => \n          'suggestions' in section ? section.suggestions : []\n        ),\n      };\n\n      const response = await apiRequest(\"POST\", \"/api/ats-analyses\", analysisData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/resumes\", resumeId] });\n      toast({\n        title: \"ATS Analysis Complete\",\n        description: \"Your resume has been analyzed for ATS compatibility.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Analysis failed\",\n        description: \"Failed to save ATS analysis. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"ATS analysis error:\", error);\n    },\n  });\n\n  const handleSaveResume = () => {\n    saveResumeMutation.mutate({\n      content: currentContent,\n      templateId: selectedTemplateId,\n      title: resumeTitle,\n    });\n  };\n\n  const handleContentChange = (newContent: ResumeContent) => {\n    setCurrentContent(newContent);\n  };\n\n  const handleTemplateChange = (templateId: string) => {\n    setSelectedTemplateId(templateId);\n  };\n\n  const handleAtsAnalysis = (feedback: AtsFeedback) => {\n    atsAnalysisMutation.mutate(feedback);\n  };\n\n  const handleExportPDF = async () => {\n    setIsExporting(true);\n    try {\n      const blob = await PdfExportService.exportResume(\n        currentContent, \n        selectedTemplateId, \n        resumeTitle\n      );\n      \n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `${resumeTitle.replace(/\\s+/g, '_')}_Resume.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Export successful\",\n        description: \"Your resume has been exported as PDF.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Export failed\",\n        description: \"Failed to export PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n      console.error(\"Export error:\", error);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  if (!currentUser) {\n    return null;\n  }\n\n  if (resumeLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-8 h-8 animate-spin text-primary mx-auto mb-4\" />\n          <p className=\"text-muted-foreground\">Loading resume...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-card\">\n        <div className=\"flex items-center justify-between px-6 py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/dashboard\")}\n              data-testid=\"button-back-to-dashboard\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Dashboard\n            </Button>\n            \n            <div>\n              <input\n                type=\"text\"\n                value={resumeTitle}\n                onChange={(e) => setResumeTitle(e.target.value)}\n                className=\"text-xl font-semibold bg-transparent border-none outline-none text-foreground\"\n                placeholder=\"Resume Title\"\n                data-testid=\"input-resume-title\"\n              />\n              <p className=\"text-sm text-muted-foreground\">\n                {resumeId ? 'Editing resume' : 'Creating new resume'}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleExportPDF}\n              disabled={isExporting}\n              data-testid=\"button-export-pdf\"\n            >\n              {isExporting ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Download className=\"w-4 h-4 mr-2\" />\n              )}\n              Export PDF\n            </Button>\n            \n            <Button\n              onClick={handleSaveResume}\n              disabled={saveResumeMutation.isPending}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-save-resume\"\n            >\n              {saveResumeMutation.isPending ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <Save className=\"w-4 h-4 mr-2\" />\n              )}\n              Save Resume\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex h-[calc(100vh-73px)]\">\n        {/* Left Panel - Tabs */}\n        <div className=\"w-1/2 border-r border-border\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full\">\n            <div className=\"border-b border-border bg-muted/30\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"editor\" className=\"flex items-center space-x-2\" data-testid=\"tab-editor\">\n                  <Settings className=\"w-4 h-4\" />\n                  <span>Editor</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"template\" className=\"flex items-center space-x-2\" data-testid=\"tab-template\">\n                  <Palette className=\"w-4 h-4\" />\n                  <span>Template</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"ats\" className=\"flex items-center space-x-2\" data-testid=\"tab-ats\">\n                  <BarChart3 className=\"w-4 h-4\" />\n                  <span>ATS Score</span>\n                </TabsTrigger>\n                <TabsTrigger value=\"preview\" className=\"flex items-center space-x-2 md:hidden\" data-testid=\"tab-preview\">\n                  <Eye className=\"w-4 h-4\" />\n                  <span>Preview</span>\n                </TabsTrigger>\n              </TabsList>\n            </div>\n\n            <TabsContent value=\"editor\" className=\"h-[calc(100%-49px)] m-0\">\n              <ResumeEditor\n                content={currentContent}\n                onChange={handleContentChange}\n                onSave={handleSaveResume}\n                isSaving={saveResumeMutation.isPending}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"template\" className=\"h-[calc(100%-49px)] m-0\">\n              <TemplateSelector\n                selectedTemplateId={selectedTemplateId}\n                onSelectTemplate={handleTemplateChange}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"ats\" className=\"h-[calc(100%-49px)] m-0\">\n              <AtsScorerPanel\n                content={currentContent}\n                attemptsUsed={resume?.atsAttempts || 0}\n                maxAttempts={5}\n                onAnalyze={handleAtsAnalysis}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"preview\" className=\"h-[calc(100%-49px)] m-0 md:hidden\">\n              <ResumePreview\n                content={currentContent}\n                templateId={selectedTemplateId}\n                title={resumeTitle}\n                atsScore={resume?.atsScore}\n                isExporting={isExporting}\n                onExport={handleExportPDF}\n              />\n            </TabsContent>\n          </Tabs>\n        </div>\n\n        {/* Right Panel - Preview (hidden on mobile) */}\n        <div className=\"hidden md:block w-1/2\">\n          <ResumePreview\n            content={currentContent}\n            templateId={selectedTemplateId}\n            title={resumeTitle}\n            atsScore={resume?.atsScore}\n            isExporting={isExporting}\n            onExport={handleExportPDF}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12007},"client/src/services/ats-scorer.ts":{"content":"import { ResumeContent, AtsFeedback } from \"@shared/schema\";\n\nexport class AtsScorer {\n  private static readonly COMMON_KEYWORDS = [\n    \"leadership\", \"management\", \"communication\", \"teamwork\", \"problem-solving\",\n    \"analytical\", \"strategic\", \"innovative\", \"results-driven\", \"experienced\",\n    \"proficient\", \"skilled\", \"expert\", \"advanced\", \"collaborative\"\n  ];\n\n  private static readonly TECH_KEYWORDS = [\n    \"javascript\", \"python\", \"java\", \"react\", \"node.js\", \"sql\", \"aws\", \"docker\",\n    \"kubernetes\", \"git\", \"agile\", \"scrum\", \"api\", \"database\", \"cloud\", \"devops\"\n  ];\n\n  static analyzeResume(content: ResumeContent, jobDescription?: string): AtsFeedback {\n    const keywordAnalysis = this.analyzeKeywords(content, jobDescription);\n    const formatAnalysis = this.analyzeFormat(content);\n    const contentAnalysis = this.analyzeContent(content);\n    const lengthAnalysis = this.analyzeLength(content);\n\n    const overallScore = Math.round(\n      (keywordAnalysis.score * 0.3) +\n      (formatAnalysis.score * 0.25) +\n      (contentAnalysis.score * 0.25) +\n      (lengthAnalysis.score * 0.2)\n    );\n\n    return {\n      overall: {\n        score: overallScore,\n        message: this.getOverallMessage(overallScore)\n      },\n      sections: {\n        keywords: keywordAnalysis,\n        format: formatAnalysis,\n        content: contentAnalysis,\n        length: lengthAnalysis\n      }\n    };\n  }\n\n  private static analyzeKeywords(content: ResumeContent, jobDescription?: string) {\n    const resumeText = this.extractResumeText(content).toLowerCase();\n    const jobText = jobDescription?.toLowerCase() || \"\";\n\n    // Extract keywords from job description or use common keywords\n    const targetKeywords = jobDescription \n      ? this.extractKeywordsFromJob(jobText)\n      : [...this.COMMON_KEYWORDS, ...this.TECH_KEYWORDS];\n\n    const foundKeywords = targetKeywords.filter(keyword => \n      resumeText.includes(keyword.toLowerCase())\n    );\n\n    const missingKeywords = targetKeywords.filter(keyword => \n      !resumeText.includes(keyword.toLowerCase())\n    ).slice(0, 10); // Limit to top 10\n\n    const score = Math.min(100, Math.round((foundKeywords.length / targetKeywords.length) * 100));\n\n    return {\n      score,\n      found: foundKeywords,\n      missing: missingKeywords,\n      suggestions: this.getKeywordSuggestions(missingKeywords, score)\n    };\n  }\n\n  private static analyzeFormat(content: ResumeContent) {\n    const issues: string[] = [];\n    const suggestions: string[] = [];\n    let score = 100;\n\n    // Check essential sections\n    if (!content.personalInfo.email) {\n      issues.push(\"Missing email address\");\n      suggestions.push(\"Add a professional email address\");\n      score -= 15;\n    }\n\n    if (!content.personalInfo.phone) {\n      issues.push(\"Missing phone number\");\n      suggestions.push(\"Include a phone number for contact\");\n      score -= 10;\n    }\n\n    if (!content.experience || content.experience.length === 0) {\n      issues.push(\"No work experience listed\");\n      suggestions.push(\"Add your work experience\");\n      score -= 30;\n    }\n\n    if (!content.education || content.education.length === 0) {\n      issues.push(\"No education listed\");\n      suggestions.push(\"Include your educational background\");\n      score -= 20;\n    }\n\n    if (!content.skills || content.skills.length === 0) {\n      issues.push(\"No skills section\");\n      suggestions.push(\"Add a skills section with relevant abilities\");\n      score -= 15;\n    }\n\n    // Check for consistency in date formats\n    const dates = content.experience.flatMap(exp => [exp.startDate, exp.endDate]);\n    if (!this.isConsistentDateFormat(dates)) {\n      issues.push(\"Inconsistent date formatting\");\n      suggestions.push(\"Use consistent date format (e.g., MM/YYYY) throughout\");\n      score -= 10;\n    }\n\n    return {\n      score: Math.max(0, score),\n      issues,\n      suggestions\n    };\n  }\n\n  private static analyzeContent(content: ResumeContent) {\n    const issues: string[] = [];\n    const suggestions: string[] = [];\n    let score = 100;\n\n    // Check summary quality\n    if (!content.summary || content.summary.length < 50) {\n      issues.push(\"Professional summary is too short or missing\");\n      suggestions.push(\"Add a compelling professional summary (2-3 sentences)\");\n      score -= 20;\n    }\n\n    // Check experience descriptions\n    const shortDescriptions = content.experience.filter(exp => \n      !exp.description || exp.description.length < 100\n    );\n\n    if (shortDescriptions.length > 0) {\n      issues.push(`${shortDescriptions.length} experience entries lack detailed descriptions`);\n      suggestions.push(\"Expand job descriptions with specific achievements and responsibilities\");\n      score -= 15;\n    }\n\n    // Check for quantified achievements\n    const resumeText = this.extractResumeText(content);\n    const hasNumbers = /\\d+(%|k|\\+|million|thousand|hours|years|projects|teams)/.test(resumeText);\n    \n    if (!hasNumbers) {\n      issues.push(\"No quantified achievements found\");\n      suggestions.push(\"Include specific numbers, percentages, or metrics to demonstrate impact\");\n      score -= 15;\n    }\n\n    // Check for action verbs\n    const actionVerbs = [\n      \"achieved\", \"improved\", \"increased\", \"decreased\", \"managed\", \"led\", \"developed\",\n      \"implemented\", \"created\", \"designed\", \"optimized\", \"streamlined\", \"delivered\"\n    ];\n    \n    const usedActionVerbs = actionVerbs.filter(verb => \n      resumeText.toLowerCase().includes(verb)\n    );\n\n    if (usedActionVerbs.length < 3) {\n      issues.push(\"Limited use of strong action verbs\");\n      suggestions.push(\"Start bullet points with strong action verbs like 'achieved', 'improved', 'led'\");\n      score -= 10;\n    }\n\n    return {\n      score: Math.max(0, score),\n      issues,\n      suggestions\n    };\n  }\n\n  private static analyzeLength(content: ResumeContent) {\n    const resumeText = this.extractResumeText(content);\n    const wordCount = resumeText.split(/\\s+/).length;\n    let score = 100;\n    let ideal = \"Perfect length\";\n    const suggestions: string[] = [];\n\n    if (wordCount < 200) {\n      score = 40;\n      ideal = \"Too short\";\n      suggestions.push(\"Expand your resume with more detailed descriptions\");\n      suggestions.push(\"Add more relevant experience and achievements\");\n    } else if (wordCount < 400) {\n      score = 70;\n      ideal = \"Could be longer\";\n      suggestions.push(\"Consider adding more details to strengthen your resume\");\n    } else if (wordCount > 800) {\n      score = 75;\n      ideal = \"Consider shortening\";\n      suggestions.push(\"Try to keep resume concise while maintaining key information\");\n    } else if (wordCount > 600) {\n      score = 90;\n      ideal = \"Good length\";\n    }\n\n    return {\n      score,\n      wordCount,\n      ideal,\n      suggestions\n    };\n  }\n\n  private static extractResumeText(content: ResumeContent): string {\n    const parts: string[] = [];\n    \n    // Personal info\n    parts.push(content.personalInfo.firstName, content.personalInfo.lastName);\n    \n    // Summary\n    if (content.summary) parts.push(content.summary);\n    \n    // Experience\n    content.experience.forEach(exp => {\n      parts.push(exp.position, exp.company, exp.description);\n      parts.push(...exp.achievements);\n    });\n    \n    // Education\n    content.education.forEach(edu => {\n      parts.push(edu.degree, edu.school);\n    });\n    \n    // Skills\n    content.skills.forEach(skillGroup => {\n      parts.push(skillGroup.category, ...skillGroup.items);\n    });\n    \n    // Projects\n    if (content.projects) {\n      content.projects.forEach(project => {\n        parts.push(project.name, project.description);\n        parts.push(...project.technologies);\n      });\n    }\n\n    return parts.filter(Boolean).join(\" \");\n  }\n\n  private static extractKeywordsFromJob(jobText: string): string[] {\n    // Simple keyword extraction - in a real app, this would be more sophisticated\n    const words = jobText.match(/\\b[a-zA-Z]{3,}\\b/g) || [];\n    const frequency: Record<string, number> = {};\n    \n    words.forEach(word => {\n      const lower = word.toLowerCase();\n      frequency[lower] = (frequency[lower] || 0) + 1;\n    });\n    \n    return Object.entries(frequency)\n      .sort(([,a], [,b]) => b - a)\n      .slice(0, 20)\n      .map(([word]) => word);\n  }\n\n  private static isConsistentDateFormat(dates: string[]): boolean {\n    const validDates = dates.filter(Boolean);\n    if (validDates.length < 2) return true;\n    \n    const formats = validDates.map(date => {\n      if (/^\\d{1,2}\\/\\d{4}$/.test(date)) return \"MM/YYYY\";\n      if (/^\\w+ \\d{4}$/.test(date)) return \"Month YYYY\";\n      if (/^\\d{4}$/.test(date)) return \"YYYY\";\n      return \"other\";\n    });\n    \n    return new Set(formats).size === 1;\n  }\n\n  private static getKeywordSuggestions(missingKeywords: string[], score: number): string[] {\n    const suggestions: string[] = [];\n    \n    if (score < 50) {\n      suggestions.push(\"Consider adding more industry-specific keywords\");\n      suggestions.push(\"Review the job description for important terms to include\");\n    }\n    \n    if (missingKeywords.length > 0) {\n      suggestions.push(`Try incorporating: ${missingKeywords.slice(0, 5).join(\", \")}`);\n    }\n    \n    return suggestions;\n  }\n\n  private static getOverallMessage(score: number): string {\n    if (score >= 90) return \"Excellent! Your resume is well-optimized for ATS systems.\";\n    if (score >= 80) return \"Great job! Your resume performs well with minor areas for improvement.\";\n    if (score >= 70) return \"Good foundation with several opportunities for optimization.\";\n    if (score >= 60) return \"Your resume needs some improvements to pass ATS filters effectively.\";\n    return \"Significant improvements needed to optimize for ATS systems.\";\n  }\n}\n","size_bytes":9747},"client/src/services/firestore.ts":{"content":"import {\n  collection,\n  doc,\n  getDocs,\n  getDoc,\n  addDoc,\n  updateDoc,\n  deleteDoc,\n  query,\n  where,\n  orderBy,\n  limit,\n  onSnapshot,\n  DocumentData,\n  QuerySnapshot,\n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Resume, ResumeContent, AtsAnalysis, InsertResume } from \"@shared/schema\";\n\nexport class FirestoreService {\n  // Resume operations\n  static async createResume(resumeData: InsertResume): Promise<string> {\n    const docRef = await addDoc(collection(db, \"resumes\"), {\n      ...resumeData,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    });\n    return docRef.id;\n  }\n\n  static async getResume(id: string): Promise<Resume | null> {\n    const docRef = doc(db, \"resumes\", id);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      return { id: docSnap.id, ...docSnap.data() } as Resume;\n    }\n    return null;\n  }\n\n  static async getUserResumes(userId: string): Promise<Resume[]> {\n    const q = query(\n      collection(db, \"resumes\"),\n      where(\"userId\", \"==\", userId),\n      orderBy(\"updatedAt\", \"desc\")\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as Resume));\n  }\n\n  static async updateResume(id: string, data: Partial<Resume>): Promise<void> {\n    const docRef = doc(db, \"resumes\", id);\n    await updateDoc(docRef, {\n      ...data,\n      updatedAt: new Date(),\n    });\n  }\n\n  static async deleteResume(id: string): Promise<void> {\n    await deleteDoc(doc(db, \"resumes\", id));\n  }\n\n  // Real-time resume listening for collaborative editing\n  static subscribeToResume(\n    id: string,\n    callback: (resume: Resume | null) => void\n  ): () => void {\n    const docRef = doc(db, \"resumes\", id);\n    return onSnapshot(docRef, (doc) => {\n      if (doc.exists()) {\n        callback({ id: doc.id, ...doc.data() } as Resume);\n      } else {\n        callback(null);\n      }\n    });\n  }\n\n  // ATS Analysis operations\n  static async saveAtsAnalysis(analysis: Omit<AtsAnalysis, \"id\" | \"createdAt\">): Promise<string> {\n    const docRef = await addDoc(collection(db, \"atsAnalyses\"), {\n      ...analysis,\n      createdAt: new Date(),\n    });\n    return docRef.id;\n  }\n\n  static async getResumeAtsHistory(resumeId: string): Promise<AtsAnalysis[]> {\n    const q = query(\n      collection(db, \"atsAnalyses\"),\n      where(\"resumeId\", \"==\", resumeId),\n      orderBy(\"createdAt\", \"desc\"),\n      limit(10)\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as AtsAnalysis));\n  }\n\n  // Batch operations for better performance\n  static async batchUpdateResumes(updates: Array<{ id: string; data: Partial<Resume> }>): Promise<void> {\n    const promises = updates.map(({ id, data }) => this.updateResume(id, data));\n    await Promise.all(promises);\n  }\n\n  // Search and filtering\n  static async searchResumes(userId: string, searchTerm: string): Promise<Resume[]> {\n    const userResumes = await this.getUserResumes(userId);\n    return userResumes.filter(resume =>\n      resume.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      resume.templateId.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n  }\n\n  static async getResumesByTemplate(userId: string, templateId: string): Promise<Resume[]> {\n    const q = query(\n      collection(db, \"resumes\"),\n      where(\"userId\", \"==\", userId),\n      where(\"templateId\", \"==\", templateId),\n      orderBy(\"updatedAt\", \"desc\")\n    );\n    \n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    } as Resume));\n  }\n\n  // Analytics and insights\n  static async getUserAnalytics(userId: string) {\n    const resumes = await this.getUserResumes(userId);\n    const totalResumes = resumes.length;\n    const avgAtsScore = resumes.reduce((sum, resume) => \n      sum + (resume.atsScore || 0), 0) / totalResumes || 0;\n    \n    const templateUsage = resumes.reduce((acc, resume) => {\n      acc[resume.templateId] = (acc[resume.templateId] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n\n    return {\n      totalResumes,\n      avgAtsScore: Math.round(avgAtsScore),\n      templateUsage,\n      mostRecentUpdate: resumes[0]?.updatedAt || null,\n    };\n  }\n}\n","size_bytes":4344},"client/src/services/pdf-export.ts":{"content":"import jsPDF from \"jspdf\";\nimport { ResumeContent } from \"@shared/schema\";\n\nexport class PdfExportService {\n  private static readonly PAGE_WIDTH = 210; // A4 width in mm\n  private static readonly PAGE_HEIGHT = 297; // A4 height in mm\n  private static readonly MARGIN = 20;\n  private static readonly LINE_HEIGHT = 6;\n\n  static async exportResume(\n    content: ResumeContent,\n    templateId: string,\n    title: string\n  ): Promise<Blob> {\n    const pdf = new jsPDF();\n    \n    // Set up fonts and colors\n    pdf.setFont(\"helvetica\", \"normal\");\n    pdf.setTextColor(33, 37, 41); // Dark gray\n\n    let yPosition = this.MARGIN;\n\n    // Header with personal information\n    yPosition = this.renderHeader(pdf, content.personalInfo, yPosition);\n    \n    // Professional Summary\n    if (content.summary) {\n      yPosition = this.renderSection(pdf, \"Professional Summary\", content.summary, yPosition);\n    }\n\n    // Work Experience\n    if (content.experience.length > 0) {\n      yPosition = this.renderExperience(pdf, content.experience, yPosition);\n    }\n\n    // Education\n    if (content.education.length > 0) {\n      yPosition = this.renderEducation(pdf, content.education, yPosition);\n    }\n\n    // Skills\n    if (content.skills.length > 0) {\n      yPosition = this.renderSkills(pdf, content.skills, yPosition);\n    }\n\n    // Projects (if any)\n    if (content.projects && content.projects.length > 0) {\n      yPosition = this.renderProjects(pdf, content.projects, yPosition);\n    }\n\n    // Certifications (if any)\n    if (content.certifications && content.certifications.length > 0) {\n      yPosition = this.renderCertifications(pdf, content.certifications, yPosition);\n    }\n\n    return pdf.output(\"blob\");\n  }\n\n  private static renderHeader(pdf: jsPDF, personalInfo: ResumeContent[\"personalInfo\"], yPosition: number): number {\n    const { firstName, lastName, email, phone, location, website, linkedin } = personalInfo;\n    \n    // Name\n    pdf.setFontSize(20);\n    pdf.setFont(\"helvetica\", \"bold\");\n    const fullName = `${firstName} ${lastName}`;\n    pdf.text(fullName, this.MARGIN, yPosition);\n    yPosition += 10;\n\n    // Contact information\n    pdf.setFontSize(10);\n    pdf.setFont(\"helvetica\", \"normal\");\n    pdf.setTextColor(100, 100, 100); // Gray\n    \n    const contactInfo = [email, phone, location, website, linkedin].filter(Boolean).join(\" • \");\n    pdf.text(contactInfo, this.MARGIN, yPosition);\n    yPosition += 15;\n\n    // Reset color\n    pdf.setTextColor(33, 37, 41);\n    \n    return yPosition;\n  }\n\n  private static renderSection(pdf: jsPDF, title: string, content: string, yPosition: number): number {\n    // Check if we need a new page\n    if (yPosition > this.PAGE_HEIGHT - 50) {\n      pdf.addPage();\n      yPosition = this.MARGIN;\n    }\n\n    // Section title\n    pdf.setFontSize(14);\n    pdf.setFont(\"helvetica\", \"bold\");\n    pdf.text(title, this.MARGIN, yPosition);\n    yPosition += 8;\n\n    // Section content\n    pdf.setFontSize(10);\n    pdf.setFont(\"helvetica\", \"normal\");\n    const lines = pdf.splitTextToSize(content, this.PAGE_WIDTH - 2 * this.MARGIN);\n    pdf.text(lines, this.MARGIN, yPosition);\n    yPosition += lines.length * this.LINE_HEIGHT + 10;\n\n    return yPosition;\n  }\n\n  private static renderExperience(pdf: jsPDF, experience: ResumeContent[\"experience\"], yPosition: number): number {\n    yPosition = this.renderSectionHeader(pdf, \"Work Experience\", yPosition);\n\n    for (const exp of experience) {\n      // Check if we need a new page\n      if (yPosition > this.PAGE_HEIGHT - 80) {\n        pdf.addPage();\n        yPosition = this.MARGIN;\n      }\n\n      // Job title and company\n      pdf.setFontSize(12);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(`${exp.position} • ${exp.company}`, this.MARGIN, yPosition);\n      yPosition += 6;\n\n      // Dates and location\n      pdf.setFontSize(9);\n      pdf.setFont(\"helvetica\", \"normal\");\n      pdf.setTextColor(100, 100, 100);\n      const dateRange = exp.current ? `${exp.startDate} - Present` : `${exp.startDate} - ${exp.endDate}`;\n      pdf.text(`${dateRange} • ${exp.location}`, this.MARGIN, yPosition);\n      yPosition += 8;\n\n      // Description\n      pdf.setFontSize(10);\n      pdf.setTextColor(33, 37, 41);\n      if (exp.description) {\n        const descLines = pdf.splitTextToSize(exp.description, this.PAGE_WIDTH - 2 * this.MARGIN - 10);\n        pdf.text(descLines, this.MARGIN + 5, yPosition);\n        yPosition += descLines.length * this.LINE_HEIGHT + 2;\n      }\n\n      // Achievements\n      if (exp.achievements.length > 0) {\n        for (const achievement of exp.achievements) {\n          const achLines = pdf.splitTextToSize(`• ${achievement}`, this.PAGE_WIDTH - 2 * this.MARGIN - 10);\n          pdf.text(achLines, this.MARGIN + 5, yPosition);\n          yPosition += achLines.length * this.LINE_HEIGHT;\n        }\n      }\n      \n      yPosition += 8;\n    }\n\n    return yPosition;\n  }\n\n  private static renderEducation(pdf: jsPDF, education: ResumeContent[\"education\"], yPosition: number): number {\n    yPosition = this.renderSectionHeader(pdf, \"Education\", yPosition);\n\n    for (const edu of education) {\n      if (yPosition > this.PAGE_HEIGHT - 60) {\n        pdf.addPage();\n        yPosition = this.MARGIN;\n      }\n\n      // Degree and school\n      pdf.setFontSize(12);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(`${edu.degree} • ${edu.school}`, this.MARGIN, yPosition);\n      yPosition += 6;\n\n      // Date and location\n      pdf.setFontSize(9);\n      pdf.setFont(\"helvetica\", \"normal\");\n      pdf.setTextColor(100, 100, 100);\n      pdf.text(`${edu.graduationDate} • ${edu.location}`, this.MARGIN, yPosition);\n      yPosition += 6;\n\n      // GPA if present\n      if (edu.gpa) {\n        pdf.setTextColor(33, 37, 41);\n        pdf.text(`GPA: ${edu.gpa}`, this.MARGIN, yPosition);\n        yPosition += 6;\n      }\n\n      yPosition += 6;\n    }\n\n    return yPosition;\n  }\n\n  private static renderSkills(pdf: jsPDF, skills: ResumeContent[\"skills\"], yPosition: number): number {\n    yPosition = this.renderSectionHeader(pdf, \"Skills\", yPosition);\n\n    for (const skillGroup of skills) {\n      if (yPosition > this.PAGE_HEIGHT - 40) {\n        pdf.addPage();\n        yPosition = this.MARGIN;\n      }\n\n      // Skill category\n      pdf.setFontSize(11);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(`${skillGroup.category}:`, this.MARGIN, yPosition);\n      \n      // Skills list\n      pdf.setFont(\"helvetica\", \"normal\");\n      const skillsText = skillGroup.items.join(\", \");\n      const skillsLines = pdf.splitTextToSize(skillsText, this.PAGE_WIDTH - 2 * this.MARGIN - 60);\n      pdf.text(skillsLines, this.MARGIN + 60, yPosition);\n      yPosition += Math.max(6, skillsLines.length * this.LINE_HEIGHT) + 4;\n    }\n\n    return yPosition + 6;\n  }\n\n  private static renderProjects(pdf: jsPDF, projects: ResumeContent[\"projects\"], yPosition: number): number {\n    yPosition = this.renderSectionHeader(pdf, \"Projects\", yPosition);\n\n    if (!projects) return yPosition;\n\n    for (const project of projects) {\n      if (yPosition > this.PAGE_HEIGHT - 60) {\n        pdf.addPage();\n        yPosition = this.MARGIN;\n      }\n\n      // Project name\n      pdf.setFontSize(12);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(project.name, this.MARGIN, yPosition);\n      yPosition += 6;\n\n      // Description\n      pdf.setFontSize(10);\n      pdf.setFont(\"helvetica\", \"normal\");\n      const descLines = pdf.splitTextToSize(project.description, this.PAGE_WIDTH - 2 * this.MARGIN);\n      pdf.text(descLines, this.MARGIN, yPosition);\n      yPosition += descLines.length * this.LINE_HEIGHT + 2;\n\n      // Technologies\n      pdf.setFontSize(9);\n      pdf.setTextColor(100, 100, 100);\n      pdf.text(`Technologies: ${project.technologies.join(\", \")}`, this.MARGIN, yPosition);\n      yPosition += 10;\n      \n      pdf.setTextColor(33, 37, 41);\n    }\n\n    return yPosition;\n  }\n\n  private static renderCertifications(pdf: jsPDF, certifications: ResumeContent[\"certifications\"], yPosition: number): number {\n    yPosition = this.renderSectionHeader(pdf, \"Certifications\", yPosition);\n\n    if (!certifications) return yPosition;\n\n    for (const cert of certifications) {\n      if (yPosition > this.PAGE_HEIGHT - 30) {\n        pdf.addPage();\n        yPosition = this.MARGIN;\n      }\n\n      pdf.setFontSize(11);\n      pdf.setFont(\"helvetica\", \"bold\");\n      pdf.text(`${cert.name} • ${cert.issuer}`, this.MARGIN, yPosition);\n      \n      pdf.setFontSize(9);\n      pdf.setFont(\"helvetica\", \"normal\");\n      pdf.setTextColor(100, 100, 100);\n      pdf.text(cert.date, this.PAGE_WIDTH - this.MARGIN - 30, yPosition);\n      \n      yPosition += 8;\n      pdf.setTextColor(33, 37, 41);\n    }\n\n    return yPosition;\n  }\n\n  private static renderSectionHeader(pdf: jsPDF, title: string, yPosition: number): number {\n    if (yPosition > this.PAGE_HEIGHT - 40) {\n      pdf.addPage();\n      yPosition = this.MARGIN;\n    }\n\n    pdf.setFontSize(14);\n    pdf.setFont(\"helvetica\", \"bold\");\n    pdf.setTextColor(33, 37, 41);\n    pdf.text(title, this.MARGIN, yPosition);\n    \n    // Add underline\n    pdf.setDrawColor(33, 37, 41);\n    pdf.line(this.MARGIN, yPosition + 2, this.PAGE_WIDTH - this.MARGIN, yPosition + 2);\n    \n    return yPosition + 12;\n  }\n}\n","size_bytes":9242},"client/src/components/auth/auth-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { LoginForm } from \"./login-form\";\nimport { SignupForm } from \"./signup-form\";\n\ninterface AuthDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialMode?: \"login\" | \"signup\";\n}\n\nexport function AuthDialog({ isOpen, onClose, initialMode = \"login\" }: AuthDialogProps) {\n  const [mode, setMode] = useState<\"login\" | \"signup\">(initialMode);\n\n  const toggleMode = () => {\n    setMode(current => current === \"login\" ? \"signup\" : \"login\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\" data-testid=\"auth-dialog\">\n        {mode === \"login\" ? (\n          <LoginForm \n            onToggleToSignup={toggleMode}\n            onClose={onClose}\n          />\n        ) : (\n          <SignupForm \n            onToggleToLogin={toggleMode}\n            onClose={onClose}\n          />\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1001},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Mail, Lock } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/auth-context\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginData = z.infer<typeof loginSchema>;\n\ninterface LoginFormProps {\n  onToggleToSignup: () => void;\n  onClose: () => void;\n}\n\nexport function LoginForm({ onToggleToSignup, onClose }: LoginFormProps) {\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { signInWithEmail, signInWithGoogle } = useAuth();\n\n  const form = useForm<LoginData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginData) => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await signInWithEmail(data.email, data.password);\n      onClose();\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign in. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await signInWithGoogle();\n      onClose();\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign in with Google. Please try again.\");\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"login-form\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-2\">Welcome Back</h2>\n        <p className=\"text-muted-foreground\">Sign in to continue building your resume</p>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\" data-testid=\"login-error\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-10\"\n              data-testid=\"input-email\"\n              {...form.register(\"email\")}\n            />\n          </div>\n          {form.formState.errors.email && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Enter your password\"\n              className=\"pl-10\"\n              data-testid=\"input-password\"\n              {...form.register(\"password\")}\n            />\n          </div>\n          {form.formState.errors.password && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.password.message}</p>\n          )}\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isLoading}\n          data-testid=\"button-signin\"\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Signing In...\n            </>\n          ) : (\n            \"Sign In\"\n          )}\n        </Button>\n      </form>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t border-border\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n        </div>\n      </div>\n\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        className=\"w-full\"\n        onClick={handleGoogleSignIn}\n        disabled={isLoading}\n        data-testid=\"button-google-signin\"\n      >\n        <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n          <path\n            fill=\"currentColor\"\n            d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n          />\n        </svg>\n        Continue with Google\n      </Button>\n\n      <div className=\"text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          Don't have an account?{\" \"}\n          <button\n            type=\"button\"\n            onClick={onToggleToSignup}\n            className=\"text-primary hover:text-primary/80 font-medium\"\n            data-testid=\"link-signup\"\n          >\n            Sign up\n          </button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5966},"client/src/components/auth/signup-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Mail, Lock, User } from \"lucide-react\";\nimport { useAuth } from \"@/contexts/auth-context\";\n\nconst signupSchema = z.object({\n  displayName: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype SignupData = z.infer<typeof signupSchema>;\n\ninterface SignupFormProps {\n  onToggleToLogin: () => void;\n  onClose: () => void;\n}\n\nexport function SignupForm({ onToggleToLogin, onClose }: SignupFormProps) {\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { signUpWithEmail, signInWithGoogle } = useAuth();\n\n  const form = useForm<SignupData>({\n    resolver: zodResolver(signupSchema),\n    defaultValues: {\n      displayName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  const onSubmit = async (data: SignupData) => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await signUpWithEmail(data.email, data.password, data.displayName);\n      onClose();\n    } catch (err: any) {\n      setError(err.message || \"Failed to create account. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleGoogleSignIn = async () => {\n    setIsLoading(true);\n    setError(\"\");\n    \n    try {\n      await signInWithGoogle();\n      onClose();\n    } catch (err: any) {\n      setError(err.message || \"Failed to sign in with Google. Please try again.\");\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"signup-form\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-2\">Create Account</h2>\n        <p className=\"text-muted-foreground\">Start building your professional resume</p>\n      </div>\n\n      {error && (\n        <Alert variant=\"destructive\" data-testid=\"signup-error\">\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      )}\n\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"displayName\">Full Name</Label>\n          <div className=\"relative\">\n            <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"displayName\"\n              type=\"text\"\n              placeholder=\"Enter your full name\"\n              className=\"pl-10\"\n              data-testid=\"input-displayname\"\n              {...form.register(\"displayName\")}\n            />\n          </div>\n          {form.formState.errors.displayName && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.displayName.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"email\">Email</Label>\n          <div className=\"relative\">\n            <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"email\"\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              className=\"pl-10\"\n              data-testid=\"input-email\"\n              {...form.register(\"email\")}\n            />\n          </div>\n          {form.formState.errors.email && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.email.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"password\">Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"Create a password\"\n              className=\"pl-10\"\n              data-testid=\"input-password\"\n              {...form.register(\"password\")}\n            />\n          </div>\n          {form.formState.errors.password && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.password.message}</p>\n          )}\n        </div>\n\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n          <div className=\"relative\">\n            <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n            <Input\n              id=\"confirmPassword\"\n              type=\"password\"\n              placeholder=\"Confirm your password\"\n              className=\"pl-10\"\n              data-testid=\"input-confirm-password\"\n              {...form.register(\"confirmPassword\")}\n            />\n          </div>\n          {form.formState.errors.confirmPassword && (\n            <p className=\"text-sm text-destructive\">{form.formState.errors.confirmPassword.message}</p>\n          )}\n        </div>\n\n        <Button\n          type=\"submit\"\n          className=\"w-full\"\n          disabled={isLoading}\n          data-testid=\"button-signup\"\n        >\n          {isLoading ? (\n            <>\n              <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              Creating Account...\n            </>\n          ) : (\n            \"Create Account\"\n          )}\n        </Button>\n      </form>\n\n      <div className=\"relative\">\n        <div className=\"absolute inset-0 flex items-center\">\n          <span className=\"w-full border-t border-border\" />\n        </div>\n        <div className=\"relative flex justify-center text-xs uppercase\">\n          <span className=\"bg-background px-2 text-muted-foreground\">Or continue with</span>\n        </div>\n      </div>\n\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        className=\"w-full\"\n        onClick={handleGoogleSignIn}\n        disabled={isLoading}\n        data-testid=\"button-google-signup\"\n      >\n        <svg className=\"w-4 h-4 mr-2\" viewBox=\"0 0 24 24\">\n          <path\n            fill=\"currentColor\"\n            d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n          />\n          <path\n            fill=\"currentColor\"\n            d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n          />\n        </svg>\n        Continue with Google\n      </Button>\n\n      <div className=\"text-center\">\n        <p className=\"text-sm text-muted-foreground\">\n          Already have an account?{\" \"}\n          <button\n            type=\"button\"\n            onClick={onToggleToLogin}\n            className=\"text-primary hover:text-primary/80 font-medium\"\n            data-testid=\"link-login\"\n          >\n            Sign in\n          </button>\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7747},"client/src/components/dashboard/resume-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Resume } from \"@shared/schema\";\nimport { getTemplate } from \"@/data/resume-templates\";\nimport { \n  MoreVertical, \n  Edit, \n  Copy, \n  Download, \n  Trash2, \n  Eye, \n  BarChart3,\n  Calendar,\n  FileText\n} from \"lucide-react\";\n\ninterface ResumeCardProps {\n  resume: Resume;\n  viewMode: \"grid\" | \"list\";\n  onEdit: () => void;\n  onDelete: () => void;\n  onDuplicate: () => void;\n}\n\nexport function ResumeCard({ resume, viewMode, onEdit, onDelete, onDuplicate }: ResumeCardProps) {\n  const [isActionsOpen, setIsActionsOpen] = useState(false);\n  const template = getTemplate(resume.templateId);\n\n  const getAtsScoreColor = (score?: number) => {\n    if (!score) return \"text-gray-400\";\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getAtsScoreLabel = (score?: number) => {\n    if (!score) return \"Not scored\";\n    if (score >= 80) return \"Excellent\";\n    if (score >= 60) return \"Good\";\n    return \"Needs Work\";\n  };\n\n  const formatDate = (date: Date | string | undefined) => {\n    if (!date) return \"Never\";\n    return new Date(date).toLocaleDateString();\n  };\n\n  const handleExport = async () => {\n    // Implementation would export the resume as PDF\n    console.log(\"Export resume:\", resume.id);\n    setIsActionsOpen(false);\n  };\n\n  const handlePreview = () => {\n    // Implementation would open preview modal\n    console.log(\"Preview resume:\", resume.id);\n    setIsActionsOpen(false);\n  };\n\n  if (viewMode === \"list\") {\n    return (\n      <Card className=\"hover:shadow-md transition-shadow duration-200\" data-testid={`card-resume-${resume.id}`}>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4 flex-1\">\n              {/* Resume Icon */}\n              <div className=\"w-12 h-16 bg-primary/10 rounded-lg flex items-center justify-center flex-shrink-0\">\n                <FileText className=\"w-6 h-6 text-primary\" />\n              </div>\n\n              {/* Resume Details */}\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <h3 className=\"text-lg font-semibold text-foreground truncate\">\n                    {resume.title}\n                  </h3>\n                  {template && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {template.name}\n                    </Badge>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                  <span className=\"flex items-center\">\n                    <Calendar className=\"w-4 h-4 mr-1\" />\n                    Updated {formatDate(resume.updatedAt || new Date())}\n                  </span>\n                  <span className=\"flex items-center\">\n                    <BarChart3 className=\"w-4 h-4 mr-1\" />\n                    <span className={getAtsScoreColor(resume.atsScore || undefined)}>\n                      {resume.atsScore || 0}% ATS\n                    </span>\n                  </span>\n                  <span>\n                    {resume.atsAttempts || 0}/5 attempts\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onEdit}\n                data-testid={`button-edit-${resume.id}`}\n              >\n                <Edit className=\"w-4 h-4 mr-2\" />\n                Edit\n              </Button>\n\n              <DropdownMenu open={isActionsOpen} onOpenChange={setIsActionsOpen}>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid={`button-actions-${resume.id}`}>\n                    <MoreVertical className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={handlePreview}>\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Preview\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={handleExport}>\n                    <Download className=\"w-4 h-4 mr-2\" />\n                    Export PDF\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={onDuplicate}>\n                    <Copy className=\"w-4 h-4 mr-2\" />\n                    Duplicate\n                  </DropdownMenuItem>\n                  <DropdownMenuItem \n                    onClick={onDelete}\n                    className=\"text-destructive focus:text-destructive\"\n                  >\n                    <Trash2 className=\"w-4 h-4 mr-2\" />\n                    Delete\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card \n      className=\"hover:shadow-lg transition-all duration-200 hover:-translate-y-1 cursor-pointer group\"\n      data-testid={`card-resume-${resume.id}`}\n    >\n      {/* Template Preview */}\n      <div \n        className={`aspect-[3/4] ${template?.preview || 'bg-gradient-to-br from-gray-50 to-gray-100'} p-4 rounded-t-lg relative`}\n        onClick={onEdit}\n      >\n        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n          <DropdownMenu open={isActionsOpen} onOpenChange={setIsActionsOpen}>\n            <DropdownMenuTrigger asChild>\n              <Button \n                variant=\"secondary\" \n                size=\"sm\" \n                className=\"h-8 w-8 p-0\"\n                onClick={(e) => e.stopPropagation()}\n                data-testid={`button-actions-${resume.id}`}\n              >\n                <MoreVertical className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem onClick={handlePreview}>\n                <Eye className=\"w-4 h-4 mr-2\" />\n                Preview\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={handleExport}>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export PDF\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={onDuplicate}>\n                <Copy className=\"w-4 h-4 mr-2\" />\n                Duplicate\n              </DropdownMenuItem>\n              <DropdownMenuItem \n                onClick={onDelete}\n                className=\"text-destructive focus:text-destructive\"\n              >\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Delete\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n\n        {/* ATS Score Badge */}\n        {resume.atsScore && (\n          <div className=\"absolute top-2 left-2\">\n            <Badge \n              className={`${getAtsScoreColor(resume.atsScore)} bg-white/90 border`}\n            >\n              {resume.atsScore}% ATS\n            </Badge>\n          </div>\n        )}\n\n        {/* Mini Resume Preview */}\n        <div className=\"bg-white dark:bg-white rounded-lg p-3 shadow-sm h-full flex flex-col justify-between\" style={{ color: '#000' }}>\n          <div className=\"space-y-2\">\n            <div \n              className=\"h-2 rounded w-full\"\n              style={{ backgroundColor: template?.colors.primary || '#6366f1' }}\n            />\n            <div className=\"h-1 bg-gray-300 rounded w-3/4\" />\n            <div className=\"h-1 bg-gray-300 rounded w-1/2\" />\n          </div>\n          <div className=\"space-y-1 flex-1 mt-3\">\n            <div className=\"h-1 bg-gray-300 rounded\" />\n            <div className=\"h-1 bg-gray-300 rounded w-4/5\" />\n            <div className=\"h-1 bg-gray-300 rounded w-3/5\" />\n          </div>\n          <div \n            className=\"h-1 rounded w-full\"\n            style={{ backgroundColor: template?.colors.secondary || '#10b981' }}\n          />\n        </div>\n      </div>\n\n      {/* Card Content */}\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-semibold text-foreground truncate flex-1 pr-2\">\n            {resume.title}\n          </h3>\n          <div className={`text-xs font-medium ${getAtsScoreColor(resume.atsScore)}`}>\n            {getAtsScoreLabel(resume.atsScore)}\n          </div>\n        </div>\n\n        {template && (\n          <p className=\"text-sm text-muted-foreground mb-3 truncate\">\n            {template.name} • {template.category}\n          </p>\n        )}\n\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n          <span>Updated {formatDate(resume.updatedAt)}</span>\n          <span>{resume.atsAttempts || 0}/5 attempts</span>\n        </div>\n\n        <div className=\"mt-3 flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={onEdit}\n            className=\"flex-1\"\n            data-testid={`button-edit-${resume.id}`}\n          >\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleExport}\n            data-testid={`button-export-${resume.id}`}\n          >\n            <Download className=\"w-3 h-3\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10006},"client/src/components/dashboard/user-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Input } from \"@/components/ui/input\";\nimport { ResumeCard } from \"./resume-card\";\nimport { useAuth } from \"@/contexts/auth-context\";\nimport { Resume } from \"@shared/schema\";\nimport { \n  Plus, \n  Search, \n  FileText, \n  BarChart3, \n  TrendingUp, \n  Clock,\n  Filter,\n  Grid,\n  List,\n  Star,\n  Download,\n  ChevronDown,\n  User,\n  LogOut\n} from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\ninterface UserStats {\n  totalResumes: number;\n  avgAtsScore: number;\n  templateUsage: Record<string, number>;\n  mostRecentUpdate: string | null;\n}\n\nexport function UserDashboard() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [sortBy, setSortBy] = useState<\"updated\" | \"created\" | \"ats\">(\"updated\");\n  const { currentUser, logout } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Fetch user's resumes\n  const { data: resumes = [], isLoading: resumesLoading } = useQuery<Resume[]>({\n    queryKey: [\"/api/resumes\", currentUser?.uid],\n    enabled: !!currentUser,\n  });\n\n  // Fetch user analytics\n  const { data: stats, isLoading: statsLoading } = useQuery<UserStats>({\n    queryKey: [\"/api/users\", currentUser?.uid, \"analytics\"],\n    enabled: !!currentUser,\n  });\n\n  const filteredResumes = resumes.filter((resume: Resume) =>\n    resume.title.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const sortedResumes = [...filteredResumes].sort((a: Resume, b: Resume) => {\n    switch (sortBy) {\n      case \"updated\":\n        return new Date(b.updatedAt!).getTime() - new Date(a.updatedAt!).getTime();\n      case \"created\":\n        return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n      case \"ats\":\n        return (b.atsScore || 0) - (a.atsScore || 0);\n      default:\n        return 0;\n    }\n  });\n\n  const getAtsScoreColor = (score?: number) => {\n    if (!score) return \"text-gray-400\";\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const handleCreateResume = () => {\n    setLocation(\"/experience-selector\");\n  };\n\n  const handleEditResume = (resumeId: string) => {\n    setLocation(`/resume-builder/${resumeId}`);\n  };\n\n  const handleDeleteResume = async (resumeId: string) => {\n    // Implementation would make API call to delete resume\n    console.log(\"Delete resume:\", resumeId);\n  };\n\n  const handleDuplicateResume = async (resumeId: string) => {\n    // Implementation would make API call to duplicate resume\n    console.log(\"Duplicate resume:\", resumeId);\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await logout();\n      setLocation(\"/\");\n    } catch (error) {\n      console.error(\"Sign out error:\", error);\n    }\n  };\n\n  if (resumesLoading || statsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        <div className=\"max-w-7xl mx-auto space-y-6\">\n          {/* Loading skeleton */}\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-1/4 mb-6\" />\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n              {[1, 2, 3, 4].map((i) => (\n                <div key={i} className=\"bg-card border border-border rounded-lg p-6\">\n                  <div className=\"h-4 bg-muted rounded w-3/4 mb-2\" />\n                  <div className=\"h-6 bg-muted rounded w-1/2\" />\n                </div>\n              ))}\n            </div>\n            <div className=\"space-y-4\">\n              {[1, 2, 3].map((i) => (\n                <div key={i} className=\"bg-card border border-border rounded-lg p-6\">\n                  <div className=\"h-4 bg-muted rounded w-1/2 mb-2\" />\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b border-border bg-card\">\n        <div className=\"max-w-7xl mx-auto px-6 py-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\">\n                Welcome back, {currentUser?.displayName || 'User'}!\n              </h1>\n              <p className=\"text-muted-foreground mt-1\">\n                Manage your resumes and track your job search progress\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button \n                onClick={handleCreateResume}\n                className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                data-testid=\"button-create-resume\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Resume\n              </Button>\n              \n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-profile-menu\">\n                    <Avatar className=\"w-6 h-6 mr-2\">\n                      <AvatarImage src={currentUser?.photoURL || \"\"} />\n                      <AvatarFallback>{currentUser?.displayName?.[0] || currentUser?.email?.[0] || \"U\"}</AvatarFallback>\n                    </Avatar>\n                    {currentUser?.displayName || \"Profile\"}\n                    <ChevronDown className=\"w-4 h-4 ml-2\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem disabled>\n                    <User className=\"w-4 h-4 mr-2\" />\n                    {currentUser?.email}\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleSignOut} data-testid=\"button-signout\">\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"max-w-7xl mx-auto px-6 py-8 space-y-8\">\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"border-primary/20\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Total Resumes\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-foreground\">\n                {stats?.totalResumes || 0}\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {resumes.length === 0 ? \"Create your first resume\" : \"Keep building!\"}\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-secondary/20\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Avg ATS Score\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className={`text-3xl font-bold ${getAtsScoreColor(stats?.avgAtsScore)}`}>\n                {stats?.avgAtsScore || 0}%\n              </div>\n              <Progress value={stats?.avgAtsScore || 0} className=\"mt-2\" />\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-accent/20\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                <TrendingUp className=\"w-4 h-4 mr-2\" />\n                This Month\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-foreground\">\n                {(resumes || []).filter((r: Resume) => {\n                  const created = new Date(r.createdAt!);\n                  const now = new Date();\n                  return created.getMonth() === now.getMonth() && \n                         created.getFullYear() === now.getFullYear();\n                }).length}\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Resumes created\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-destructive/20\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"text-sm font-medium text-muted-foreground flex items-center\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Last Updated\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-lg font-semibold text-foreground\">\n                {stats?.mostRecentUpdate \n                  ? new Date(stats.mostRecentUpdate).toLocaleDateString()\n                  : \"Never\"\n                }\n              </div>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                Most recent edit\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Resumes Section */}\n        <div>\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-foreground\">Your Resumes</h2>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Search */}\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                <Input\n                  placeholder=\"Search resumes...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 w-64\"\n                  data-testid=\"input-search-resumes\"\n                />\n              </div>\n\n              {/* Sort */}\n              <select\n                value={sortBy}\n                onChange={(e) => setSortBy(e.target.value as \"updated\" | \"created\" | \"ats\")}\n                className=\"px-3 py-2 border border-border rounded-lg bg-background text-foreground\"\n                data-testid=\"select-sort-by\"\n              >\n                <option value=\"updated\">Last Updated</option>\n                <option value=\"created\">Date Created</option>\n                <option value=\"ats\">ATS Score</option>\n              </select>\n\n              {/* View Mode */}\n              <div className=\"flex border border-border rounded-lg\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid className=\"w-4 h-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"w-4 h-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Empty State */}\n          {sortedResumes.length === 0 && (\n            <Card className=\"border-dashed border-2 border-border\">\n              <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mb-4\">\n                  <FileText className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n                  {searchTerm ? \"No resumes found\" : \"No resumes yet\"}\n                </h3>\n                <p className=\"text-muted-foreground text-center mb-6 max-w-md\">\n                  {searchTerm \n                    ? \"Try adjusting your search terms or create a new resume\"\n                    : \"Create your first professional resume with our AI-powered builder and ATS optimization\"\n                  }\n                </p>\n                <Button \n                  onClick={handleCreateResume}\n                  className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n                  data-testid=\"button-create-first-resume\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Create Your First Resume\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Resumes Grid/List */}\n          {sortedResumes.length > 0 && (\n            <div className={\n              viewMode === \"grid\" \n                ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" \n                : \"space-y-4\"\n            }>\n              {sortedResumes.map((resume: Resume) => (\n                <ResumeCard\n                  key={resume.id}\n                  resume={resume}\n                  viewMode={viewMode}\n                  onEdit={() => handleEditResume(resume.id)}\n                  onDelete={() => handleDeleteResume(resume.id)}\n                  onDuplicate={() => handleDuplicateResume(resume.id)}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14134},"client/src/components/resume/ats-scorer-panel.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ResumeContent, AtsFeedback } from \"@shared/schema\";\nimport { AtsScorer } from \"@/services/ats-scorer\";\nimport {\n  BarChart3,\n  Target,\n  AlertCircle,\n  CheckCircle,\n  TrendingUp,\n  FileText,\n  Clock,\n  Lightbulb,\n  Zap,\n  RefreshCw\n} from \"lucide-react\";\n\ninterface AtsScorerPanelProps {\n  content: ResumeContent;\n  attemptsUsed: number;\n  maxAttempts: number;\n  onAnalyze: (feedback: AtsFeedback) => void;\n  className?: string;\n}\n\nexport function AtsScorerPanel({ \n  content, \n  attemptsUsed, \n  maxAttempts,\n  onAnalyze,\n  className = \"\" \n}: AtsScorerPanelProps) {\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [feedback, setFeedback] = useState<AtsFeedback | null>(null);\n  const [showDetails, setShowDetails] = useState(false);\n\n  const remainingAttempts = maxAttempts - attemptsUsed;\n  const canAnalyze = remainingAttempts > 0 && !isAnalyzing;\n\n  const handleAnalyze = async () => {\n    if (!canAnalyze) return;\n\n    setIsAnalyzing(true);\n    try {\n      // Simulate API delay for analysis\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      const analysis = AtsScorer.analyzeResume(content);\n      setFeedback(analysis);\n      setShowDetails(true);\n      onAnalyze(analysis);\n    } catch (error) {\n      console.error('ATS Analysis failed:', error);\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getScoreLabel = (score: number) => {\n    if (score >= 80) return \"Excellent\";\n    if (score >= 60) return \"Good\";\n    return \"Needs Work\";\n  };\n\n  const getProgressColor = (score: number) => {\n    if (score >= 80) return \"bg-green-500\";\n    if (score >= 60) return \"bg-yellow-500\";\n    return \"bg-red-500\";\n  };\n\n  return (\n    <div className={`h-full flex flex-col bg-background ${className}`}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-border bg-card\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-2xl font-bold text-foreground flex items-center\">\n            <BarChart3 className=\"w-6 h-6 mr-2 text-primary\" />\n            ATS Scorer\n          </h2>\n          \n          <Badge \n            variant={remainingAttempts > 0 ? \"default\" : \"destructive\"}\n            className=\"text-sm\"\n          >\n            {remainingAttempts}/{maxAttempts} attempts remaining\n          </Badge>\n        </div>\n\n        {/* Analysis Button */}\n        <Button\n          onClick={handleAnalyze}\n          disabled={!canAnalyze}\n          className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 disabled:opacity-50\"\n          size=\"lg\"\n          data-testid=\"button-analyze-ats\"\n        >\n          {isAnalyzing ? (\n            <>\n              <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n              Analyzing Resume...\n            </>\n          ) : (\n            <>\n              <Zap className=\"w-4 h-4 mr-2\" />\n              Analyze ATS Score\n            </>\n          )}\n        </Button>\n\n        {remainingAttempts === 0 && (\n          <Alert className=\"mt-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              You've used all your ATS analysis attempts for this resume. \n              Consider upgrading for unlimited analyses.\n            </AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      {/* Analysis Results */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6\">\n          {!feedback && !isAnalyzing && (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Target className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Ready to Analyze\n              </h3>\n              <p className=\"text-muted-foreground\">\n                Click \"Analyze ATS Score\" to get detailed feedback on your resume's \n                compatibility with Applicant Tracking Systems.\n              </p>\n            </div>\n          )}\n\n          {isAnalyzing && (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <BarChart3 className=\"w-8 h-8 text-primary animate-pulse\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">\n                Analyzing Your Resume\n              </h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Our AI is evaluating your resume against ATS standards...\n              </p>\n              <Progress value={75} className=\"w-48 mx-auto\" />\n            </div>\n          )}\n\n          {feedback && (\n            <div className=\"space-y-6\">\n              {/* Overall Score */}\n              <Card className=\"border-2 border-primary/20\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Overall ATS Score</span>\n                    <span className={`text-3xl font-bold ${getScoreColor(feedback.overall.score)}`}>\n                      {feedback.overall.score}%\n                    </span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Progress \n                    value={feedback.overall.score} \n                    className=\"mb-4\"\n                  />\n                  <div className=\"flex items-center justify-between\">\n                    <span className={`text-lg font-semibold ${getScoreColor(feedback.overall.score)}`}>\n                      {getScoreLabel(feedback.overall.score)}\n                    </span>\n                    <Badge className={getScoreColor(feedback.overall.score).replace('text-', 'bg-').replace(' dark:text-', ' dark:bg-').replace(/-(400|600)/, '-100 $&')}>\n                      {feedback.overall.score >= 80 ? 'Excellent' : \n                       feedback.overall.score >= 60 ? 'Good' : 'Needs Work'}\n                    </Badge>\n                  </div>\n                  <p className=\"text-muted-foreground mt-2\">\n                    {feedback.overall.message}\n                  </p>\n                </CardContent>\n              </Card>\n\n              {/* Detailed Analysis */}\n              <Tabs defaultValue=\"breakdown\" className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger value=\"breakdown\">Score Breakdown</TabsTrigger>\n                  <TabsTrigger value=\"keywords\">Keywords</TabsTrigger>\n                  <TabsTrigger value=\"suggestions\">Suggestions</TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"breakdown\" className=\"space-y-4\">\n                  {/* Keywords Score */}\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold flex items-center\">\n                          <Target className=\"w-4 h-4 mr-2 text-primary\" />\n                          Keywords\n                        </h4>\n                        <span className={`font-bold ${getScoreColor(feedback.sections.keywords.score)}`}>\n                          {feedback.sections.keywords.score}%\n                        </span>\n                      </div>\n                      <Progress value={feedback.sections.keywords.score} className=\"mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Found {feedback.sections.keywords.found.length} relevant keywords\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Format Score */}\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold flex items-center\">\n                          <FileText className=\"w-4 h-4 mr-2 text-primary\" />\n                          Format\n                        </h4>\n                        <span className={`font-bold ${getScoreColor(feedback.sections.format.score)}`}>\n                          {feedback.sections.format.score}%\n                        </span>\n                      </div>\n                      <Progress value={feedback.sections.format.score} className=\"mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {feedback.sections.format.issues.length === 0 \n                          ? \"Format looks good!\" \n                          : `${feedback.sections.format.issues.length} formatting issues detected`\n                        }\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Content Score */}\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold flex items-center\">\n                          <TrendingUp className=\"w-4 h-4 mr-2 text-primary\" />\n                          Content\n                        </h4>\n                        <span className={`font-bold ${getScoreColor(feedback.sections.content.score)}`}>\n                          {feedback.sections.content.score}%\n                        </span>\n                      </div>\n                      <Progress value={feedback.sections.content.score} className=\"mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Content quality and structure assessment\n                      </p>\n                    </CardContent>\n                  </Card>\n\n                  {/* Length Score */}\n                  <Card>\n                    <CardContent className=\"pt-6\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold flex items-center\">\n                          <Clock className=\"w-4 h-4 mr-2 text-primary\" />\n                          Length\n                        </h4>\n                        <span className={`font-bold ${getScoreColor(feedback.sections.length.score)}`}>\n                          {feedback.sections.length.score}%\n                        </span>\n                      </div>\n                      <Progress value={feedback.sections.length.score} className=\"mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">\n                        {feedback.sections.length.wordCount} words • {feedback.sections.length.ideal}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"keywords\" className=\"space-y-4\">\n                  {/* Found Keywords */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-base flex items-center text-green-600 dark:text-green-400\">\n                        <CheckCircle className=\"w-4 h-4 mr-2\" />\n                        Found Keywords ({feedback.sections.keywords.found.length})\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {feedback.sections.keywords.found.map((keyword, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                            {keyword}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Missing Keywords */}\n                  {feedback.sections.keywords.missing.length > 0 && (\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"text-base flex items-center text-amber-600 dark:text-amber-400\">\n                          <AlertCircle className=\"w-4 h-4 mr-2\" />\n                          Missing Keywords ({feedback.sections.keywords.missing.length})\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"flex flex-wrap gap-2\">\n                          {feedback.sections.keywords.missing.map((keyword, index) => (\n                            <Badge key={index} variant=\"outline\" className=\"border-amber-300 text-amber-700 dark:border-amber-700 dark:text-amber-300\">\n                              {keyword}\n                            </Badge>\n                          ))}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  )}\n                </TabsContent>\n\n                <TabsContent value=\"suggestions\" className=\"space-y-4\">\n                  {/* All Suggestions */}\n                  <div className=\"space-y-4\">\n                    {feedback.sections.keywords.suggestions.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-base flex items-center\">\n                            <Lightbulb className=\"w-4 h-4 mr-2 text-amber-500\" />\n                            Keyword Suggestions\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <ul className=\"space-y-2\">\n                            {feedback.sections.keywords.suggestions.map((suggestion, index) => (\n                              <li key={index} className=\"flex items-start space-x-2\">\n                                <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                                <span className=\"text-sm\">{suggestion}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {feedback.sections.format.suggestions.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-base flex items-center\">\n                            <FileText className=\"w-4 h-4 mr-2 text-primary\" />\n                            Format Suggestions\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <ul className=\"space-y-2\">\n                            {feedback.sections.format.suggestions.map((suggestion, index) => (\n                              <li key={index} className=\"flex items-start space-x-2\">\n                                <div className=\"w-1.5 h-1.5 bg-primary rounded-full mt-2 flex-shrink-0\" />\n                                <span className=\"text-sm\">{suggestion}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {feedback.sections.content.suggestions.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-base flex items-center\">\n                            <TrendingUp className=\"w-4 h-4 mr-2 text-secondary\" />\n                            Content Suggestions\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <ul className=\"space-y-2\">\n                            {feedback.sections.content.suggestions.map((suggestion, index) => (\n                              <li key={index} className=\"flex items-start space-x-2\">\n                                <div className=\"w-1.5 h-1.5 bg-secondary rounded-full mt-2 flex-shrink-0\" />\n                                <span className=\"text-sm\">{suggestion}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {feedback.sections.length.suggestions.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"text-base flex items-center\">\n                            <Clock className=\"w-4 h-4 mr-2 text-accent\" />\n                            Length Suggestions\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <ul className=\"space-y-2\">\n                            {feedback.sections.length.suggestions.map((suggestion, index) => (\n                              <li key={index} className=\"flex items-start space-x-2\">\n                                <div className=\"w-1.5 h-1.5 bg-accent rounded-full mt-2 flex-shrink-0\" />\n                                <span className=\"text-sm\">{suggestion}</span>\n                              </li>\n                            ))}\n                          </ul>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </div>\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":18310},"client/src/components/resume/resume-editor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Plus, \n  Trash2, \n  GripVertical, \n  Save, \n  User, \n  Briefcase, \n  GraduationCap, \n  Code, \n  Award,\n  Globe,\n  Languages\n} from \"lucide-react\";\nimport { ResumeContent } from \"@shared/schema\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst personalInfoSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: z.string().email(\"Please enter a valid email address\"),\n  phone: z.string().min(10, \"Please enter a valid phone number\"),\n  location: z.string().min(2, \"Location is required\"),\n  website: z.string().url().optional().or(z.literal(\"\")),\n  linkedin: z.string().url().optional().or(z.literal(\"\")),\n  github: z.string().url().optional().or(z.literal(\"\")),\n});\n\ninterface ResumeEditorProps {\n  content: ResumeContent;\n  onChange: (content: ResumeContent) => void;\n  onSave: () => void;\n  isSaving: boolean;\n}\n\nexport function ResumeEditor({ content, onChange, onSave, isSaving }: ResumeEditorProps) {\n  const [activeTab, setActiveTab] = useState(\"personal\");\n  const [sectionOrder, setSectionOrder] = useState([\n    \"personal\",\n    \"summary\", \n    \"experience\",\n    \"education\",\n    \"skills\",\n    \"projects\",\n    \"certifications\",\n    \"languages\"\n  ]);\n\n  const personalForm = useForm({\n    resolver: zodResolver(personalInfoSchema),\n    defaultValues: content.personalInfo,\n  });\n\n  useEffect(() => {\n    personalForm.reset(content.personalInfo);\n  }, [content.personalInfo, personalForm]);\n\n  const handlePersonalInfoChange = (data: any) => {\n    onChange({\n      ...content,\n      personalInfo: { ...content.personalInfo, ...data }\n    });\n  };\n\n  const handleSummaryChange = (summary: string) => {\n    onChange({ ...content, summary });\n  };\n\n  const addExperience = () => {\n    const newExperience = {\n      id: uuidv4(),\n      position: \"\",\n      company: \"\",\n      location: \"\",\n      startDate: \"\",\n      endDate: \"\",\n      current: false,\n      description: \"\",\n      achievements: []\n    };\n    onChange({\n      ...content,\n      experience: [...content.experience, newExperience]\n    });\n  };\n\n  const updateExperience = (id: string, updates: any) => {\n    onChange({\n      ...content,\n      experience: content.experience.map(exp => \n        exp.id === id ? { ...exp, ...updates } : exp\n      )\n    });\n  };\n\n  const removeExperience = (id: string) => {\n    onChange({\n      ...content,\n      experience: content.experience.filter(exp => exp.id !== id)\n    });\n  };\n\n  const addEducation = () => {\n    const newEducation = {\n      id: uuidv4(),\n      degree: \"\",\n      school: \"\",\n      location: \"\",\n      graduationDate: \"\",\n      gpa: \"\",\n      achievements: []\n    };\n    onChange({\n      ...content,\n      education: [...content.education, newEducation]\n    });\n  };\n\n  const updateEducation = (id: string, updates: any) => {\n    onChange({\n      ...content,\n      education: content.education.map(edu => \n        edu.id === id ? { ...edu, ...updates } : edu\n      )\n    });\n  };\n\n  const removeEducation = (id: string) => {\n    onChange({\n      ...content,\n      education: content.education.filter(edu => edu.id !== id)\n    });\n  };\n\n  const addSkillCategory = () => {\n    const newCategory = {\n      id: uuidv4(),\n      category: \"New Category\",\n      items: []\n    };\n    onChange({\n      ...content,\n      skills: [...content.skills, newCategory]\n    });\n  };\n\n  const updateSkillCategory = (id: string, updates: any) => {\n    onChange({\n      ...content,\n      skills: content.skills.map(skill => \n        skill.id === id ? { ...skill, ...updates } : skill\n      )\n    });\n  };\n\n  const removeSkillCategory = (id: string) => {\n    onChange({\n      ...content,\n      skills: content.skills.filter(skill => skill.id !== id)\n    });\n  };\n\n  const addProject = () => {\n    if (!content.projects) {\n      onChange({ ...content, projects: [] });\n    }\n    const newProject = {\n      id: uuidv4(),\n      name: \"\",\n      description: \"\",\n      technologies: [],\n      url: \"\",\n      github: \"\"\n    };\n    onChange({\n      ...content,\n      projects: [...(content.projects || []), newProject]\n    });\n  };\n\n  const updateProject = (id: string, updates: any) => {\n    if (!content.projects) return;\n    onChange({\n      ...content,\n      projects: content.projects.map(project => \n        project.id === id ? { ...project, ...updates } : project\n      )\n    });\n  };\n\n  const removeProject = (id: string) => {\n    if (!content.projects) return;\n    onChange({\n      ...content,\n      projects: content.projects.filter(project => project.id !== id)\n    });\n  };\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const items = Array.from(sectionOrder);\n    const [reorderedItem] = items.splice(result.source.index, 1);\n    items.splice(result.destination.index, 0, reorderedItem);\n\n    setSectionOrder(items);\n  };\n\n  return (\n    <div className=\"h-full flex flex-col bg-background\">\n      {/* Editor Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border bg-card\">\n        <h2 className=\"text-lg font-semibold text-foreground\">Edit Resume Content</h2>\n        <Button \n          onClick={onSave} \n          disabled={isSaving}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          data-testid=\"button-save-resume\"\n        >\n          {isSaving ? (\n            <>\n              <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            <>\n              <Save className=\"w-4 h-4 mr-2\" />\n              Save\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Section Reordering */}\n      <div className=\"p-4 bg-muted/30 border-b border-border\">\n        <Label className=\"text-sm font-medium text-muted-foreground mb-2 block\">\n          Section Order (Drag to reorder)\n        </Label>\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <Droppable droppableId=\"sections\" direction=\"horizontal\">\n            {(provided) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                className=\"flex flex-wrap gap-2\"\n              >\n                {sectionOrder.map((section, index) => (\n                  <Draggable key={section} draggableId={section} index={index}>\n                    {(provided) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        className=\"flex items-center space-x-1 bg-card border border-border rounded-lg px-3 py-1 cursor-move hover:bg-accent/50 transition-colors\"\n                      >\n                        <GripVertical className=\"w-3 h-3 text-muted-foreground\" />\n                        <span className=\"text-sm capitalize\">{section}</span>\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n\n      {/* Content Editor */}\n      <ScrollArea className=\"flex-1\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-8 m-4\">\n            <TabsTrigger value=\"personal\" className=\"flex items-center space-x-1\">\n              <User className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Personal</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n            <TabsTrigger value=\"experience\" className=\"flex items-center space-x-1\">\n              <Briefcase className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Experience</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"education\" className=\"flex items-center space-x-1\">\n              <GraduationCap className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Education</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"skills\" className=\"flex items-center space-x-1\">\n              <Code className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Skills</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"projects\" className=\"flex items-center space-x-1\">\n              <Globe className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Projects</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"certifications\" className=\"flex items-center space-x-1\">\n              <Award className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Certs</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"languages\" className=\"flex items-center space-x-1\">\n              <Languages className=\"w-4 h-4\" />\n              <span className=\"hidden sm:inline\">Languages</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Personal Information */}\n          <TabsContent value=\"personal\" className=\"p-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Personal Information</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">First Name</Label>\n                    <Input\n                      id=\"firstName\"\n                      {...personalForm.register(\"firstName\")}\n                      onChange={(e) => handlePersonalInfoChange({ firstName: e.target.value })}\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Last Name</Label>\n                    <Input\n                      id=\"lastName\"\n                      {...personalForm.register(\"lastName\")}\n                      onChange={(e) => handlePersonalInfoChange({ lastName: e.target.value })}\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    {...personalForm.register(\"email\")}\n                    onChange={(e) => handlePersonalInfoChange({ email: e.target.value })}\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"phone\">Phone</Label>\n                    <Input\n                      id=\"phone\"\n                      {...personalForm.register(\"phone\")}\n                      onChange={(e) => handlePersonalInfoChange({ phone: e.target.value })}\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"location\">Location</Label>\n                    <Input\n                      id=\"location\"\n                      {...personalForm.register(\"location\")}\n                      onChange={(e) => handlePersonalInfoChange({ location: e.target.value })}\n                      data-testid=\"input-location\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"website\">Website</Label>\n                    <Input\n                      id=\"website\"\n                      placeholder=\"https://...\"\n                      {...personalForm.register(\"website\")}\n                      onChange={(e) => handlePersonalInfoChange({ website: e.target.value })}\n                      data-testid=\"input-website\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"linkedin\">LinkedIn</Label>\n                    <Input\n                      id=\"linkedin\"\n                      placeholder=\"https://linkedin.com/in/...\"\n                      {...personalForm.register(\"linkedin\")}\n                      onChange={(e) => handlePersonalInfoChange({ linkedin: e.target.value })}\n                      data-testid=\"input-linkedin\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"github\">GitHub</Label>\n                    <Input\n                      id=\"github\"\n                      placeholder=\"https://github.com/...\"\n                      {...personalForm.register(\"github\")}\n                      onChange={(e) => handlePersonalInfoChange({ github: e.target.value })}\n                      data-testid=\"input-github\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Professional Summary */}\n          <TabsContent value=\"summary\" className=\"p-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Professional Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"Write a compelling professional summary highlighting your key achievements and career objectives...\"\n                  value={content.summary}\n                  onChange={(e) => handleSummaryChange(e.target.value)}\n                  rows={6}\n                  data-testid=\"textarea-summary\"\n                />\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Work Experience */}\n          <TabsContent value=\"experience\" className=\"p-4 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Work Experience</h3>\n              <Button onClick={addExperience} data-testid=\"button-add-experience\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Experience\n              </Button>\n            </div>\n            \n            {content.experience.map((exp, index) => (\n              <Card key={exp.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">Experience #{index + 1}</CardTitle>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeExperience(exp.id)}\n                      data-testid={`button-remove-experience-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Position</Label>\n                      <Input\n                        value={exp.position}\n                        onChange={(e) => updateExperience(exp.id, { position: e.target.value })}\n                        data-testid={`input-position-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Company</Label>\n                      <Input\n                        value={exp.company}\n                        onChange={(e) => updateExperience(exp.id, { company: e.target.value })}\n                        data-testid={`input-company-${index}`}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label>Location</Label>\n                      <Input\n                        value={exp.location}\n                        onChange={(e) => updateExperience(exp.id, { location: e.target.value })}\n                        data-testid={`input-exp-location-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Start Date</Label>\n                      <Input\n                        placeholder=\"MM/YYYY\"\n                        value={exp.startDate}\n                        onChange={(e) => updateExperience(exp.id, { startDate: e.target.value })}\n                        data-testid={`input-start-date-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>End Date</Label>\n                      <Input\n                        placeholder=\"MM/YYYY or Present\"\n                        value={exp.current ? \"Present\" : exp.endDate}\n                        onChange={(e) => updateExperience(exp.id, { \n                          endDate: e.target.value,\n                          current: e.target.value.toLowerCase() === \"present\"\n                        })}\n                        data-testid={`input-end-date-${index}`}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <Label>Description</Label>\n                    <Textarea\n                      placeholder=\"Describe your role and responsibilities...\"\n                      value={exp.description}\n                      onChange={(e) => updateExperience(exp.id, { description: e.target.value })}\n                      rows={3}\n                      data-testid={`textarea-description-${index}`}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Education */}\n          <TabsContent value=\"education\" className=\"p-4 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Education</h3>\n              <Button onClick={addEducation} data-testid=\"button-add-education\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Education\n              </Button>\n            </div>\n            \n            {content.education.map((edu, index) => (\n              <Card key={edu.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">Education #{index + 1}</CardTitle>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeEducation(edu.id)}\n                      data-testid={`button-remove-education-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Degree</Label>\n                      <Input\n                        value={edu.degree}\n                        onChange={(e) => updateEducation(edu.id, { degree: e.target.value })}\n                        data-testid={`input-degree-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>School</Label>\n                      <Input\n                        value={edu.school}\n                        onChange={(e) => updateEducation(edu.id, { school: e.target.value })}\n                        data-testid={`input-school-${index}`}\n                      />\n                    </div>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <Label>Location</Label>\n                      <Input\n                        value={edu.location}\n                        onChange={(e) => updateEducation(edu.id, { location: e.target.value })}\n                        data-testid={`input-edu-location-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>Graduation Date</Label>\n                      <Input\n                        placeholder=\"MM/YYYY\"\n                        value={edu.graduationDate}\n                        onChange={(e) => updateEducation(edu.id, { graduationDate: e.target.value })}\n                        data-testid={`input-graduation-date-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>GPA (Optional)</Label>\n                      <Input\n                        placeholder=\"3.8/4.0\"\n                        value={edu.gpa}\n                        onChange={(e) => updateEducation(edu.id, { gpa: e.target.value })}\n                        data-testid={`input-gpa-${index}`}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Skills */}\n          <TabsContent value=\"skills\" className=\"p-4 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Skills</h3>\n              <Button onClick={addSkillCategory} data-testid=\"button-add-skill-category\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Category\n              </Button>\n            </div>\n            \n            {content.skills.map((skillGroup, index) => (\n              <Card key={skillGroup.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <Input\n                      value={skillGroup.category}\n                      onChange={(e) => updateSkillCategory(skillGroup.id, { category: e.target.value })}\n                      className=\"text-base font-semibold bg-transparent border-none p-0 h-auto\"\n                      data-testid={`input-skill-category-${index}`}\n                    />\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeSkillCategory(skillGroup.id)}\n                      data-testid={`button-remove-skill-category-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    placeholder=\"Enter skills separated by commas (e.g., JavaScript, React, Node.js)\"\n                    value={skillGroup.items.join(\", \")}\n                    onChange={(e) => updateSkillCategory(skillGroup.id, { \n                      items: e.target.value.split(\",\").map(item => item.trim()).filter(Boolean)\n                    })}\n                    rows={2}\n                    data-testid={`textarea-skills-${index}`}\n                  />\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Projects */}\n          <TabsContent value=\"projects\" className=\"p-4 space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Projects</h3>\n              <Button onClick={addProject} data-testid=\"button-add-project\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Project\n              </Button>\n            </div>\n            \n            {(content.projects || []).map((project, index) => (\n              <Card key={project.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-base\">Project #{index + 1}</CardTitle>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={() => removeProject(project.id)}\n                      data-testid={`button-remove-project-${index}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label>Project Name</Label>\n                    <Input\n                      value={project.name}\n                      onChange={(e) => updateProject(project.id, { name: e.target.value })}\n                      data-testid={`input-project-name-${index}`}\n                    />\n                  </div>\n                  <div>\n                    <Label>Description</Label>\n                    <Textarea\n                      placeholder=\"Describe the project and your contributions...\"\n                      value={project.description}\n                      onChange={(e) => updateProject(project.id, { description: e.target.value })}\n                      rows={3}\n                      data-testid={`textarea-project-description-${index}`}\n                    />\n                  </div>\n                  <div>\n                    <Label>Technologies</Label>\n                    <Textarea\n                      placeholder=\"List technologies used (comma-separated)\"\n                      value={project.technologies.join(\", \")}\n                      onChange={(e) => updateProject(project.id, { \n                        technologies: e.target.value.split(\",\").map(tech => tech.trim()).filter(Boolean)\n                      })}\n                      rows={2}\n                      data-testid={`textarea-project-technologies-${index}`}\n                    />\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Project URL</Label>\n                      <Input\n                        placeholder=\"https://...\"\n                        value={project.url}\n                        onChange={(e) => updateProject(project.id, { url: e.target.value })}\n                        data-testid={`input-project-url-${index}`}\n                      />\n                    </div>\n                    <div>\n                      <Label>GitHub Repository</Label>\n                      <Input\n                        placeholder=\"https://github.com/...\"\n                        value={project.github}\n                        onChange={(e) => updateProject(project.id, { github: e.target.value })}\n                        data-testid={`input-project-github-${index}`}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </TabsContent>\n\n          {/* Other tabs would be similar patterns */}\n          <TabsContent value=\"certifications\" className=\"p-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <p className=\"text-muted-foreground text-center\">\n                  Certifications section - Similar implementation pattern as above sections\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"languages\" className=\"p-4\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <p className=\"text-muted-foreground text-center\">\n                  Languages section - Similar implementation pattern as above sections\n                </p>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </ScrollArea>\n    </div>\n  );\n}\n","size_bytes":28304},"client/src/components/resume/resume-preview.tsx":{"content":"import { useEffect, useRef, useState } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { ResumeContent } from \"@shared/schema\";\nimport { getTemplate } from \"@/data/resume-templates\";\nimport { TemplateRenderer } from \"@/components/templates/template-renderer\";\nimport { PdfExportService } from \"@/services/pdf-export\";\nimport { Download, Eye, ZoomIn, ZoomOut, Maximize2 } from \"lucide-react\";\n\ninterface ResumePreviewProps {\n  content: ResumeContent;\n  templateId: string;\n  title: string;\n  atsScore?: number;\n  isExporting?: boolean;\n  onExport?: () => void;\n}\n\nexport function ResumePreview({ \n  content, \n  templateId, \n  title, \n  atsScore,\n  isExporting = false,\n  onExport \n}: ResumePreviewProps) {\n  const previewRef = useRef<HTMLDivElement>(null);\n  const [zoom, setZoom] = useState(0.7);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const template = getTemplate(templateId);\n\n  const handleExportPDF = async () => {\n    if (onExport) {\n      onExport();\n    } else {\n      try {\n        const blob = await PdfExportService.exportResume(content, templateId, title);\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `${title.replace(/\\s+/g, '_')}_Resume.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      } catch (error) {\n        console.error('Export failed:', error);\n      }\n    }\n  };\n\n  const handleZoomIn = () => {\n    setZoom(prev => Math.min(prev + 0.1, 2));\n  };\n\n  const handleZoomOut = () => {\n    setZoom(prev => Math.max(prev - 0.1, 0.3));\n  };\n\n  const toggleFullscreen = () => {\n    setIsFullscreen(!isFullscreen);\n  };\n\n  const getAtsScoreColor = (score?: number) => {\n    if (!score) return \"text-muted-foreground\";\n    if (score >= 80) return \"text-green-600 dark:text-green-400\";\n    if (score >= 60) return \"text-yellow-600 dark:text-yellow-400\";\n    return \"text-red-600 dark:text-red-400\";\n  };\n\n  const getAtsScoreLabel = (score?: number) => {\n    if (!score) return \"Not scored\";\n    if (score >= 80) return \"Excellent\";\n    if (score >= 60) return \"Good\";\n    return \"Needs Work\";\n  };\n\n  return (\n    <div className={`h-full flex flex-col bg-muted/20 ${isFullscreen ? 'fixed inset-0 z-50' : ''}`}>\n      {/* Preview Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-border bg-card\">\n        <div className=\"flex items-center space-x-4\">\n          <h3 className=\"text-lg font-semibold text-foreground\">Live Preview</h3>\n          {template && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {template.name}\n            </Badge>\n          )}\n          {atsScore !== undefined && (\n            <div className=\"flex items-center space-x-2\">\n              <Eye className=\"w-4 h-4 text-muted-foreground\" />\n              <span className={`text-sm font-medium ${getAtsScoreColor(atsScore)}`}>\n                ATS: {atsScore}% ({getAtsScoreLabel(atsScore)})\n              </span>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {/* Zoom Controls */}\n          <div className=\"flex items-center space-x-1 mr-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomOut}\n              disabled={zoom <= 0.3}\n              data-testid=\"button-zoom-out\"\n            >\n              <ZoomOut className=\"w-4 h-4\" />\n            </Button>\n            <span className=\"text-sm text-muted-foreground px-2 min-w-[3rem] text-center\">\n              {Math.round(zoom * 100)}%\n            </span>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleZoomIn}\n              disabled={zoom >= 2}\n              data-testid=\"button-zoom-in\"\n            >\n              <ZoomIn className=\"w-4 h-4\" />\n            </Button>\n          </div>\n\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={toggleFullscreen}\n            data-testid=\"button-fullscreen\"\n          >\n            <Maximize2 className=\"w-4 h-4\" />\n          </Button>\n\n          <Button\n            onClick={handleExportPDF}\n            disabled={isExporting}\n            className=\"bg-secondary text-secondary-foreground hover:bg-secondary/90\"\n            data-testid=\"button-export-pdf\"\n          >\n            {isExporting ? (\n              <>\n                <div className=\"w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                Exporting...\n              </>\n            ) : (\n              <>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export PDF\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Preview Content */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6 flex justify-center\">\n          <div\n            ref={previewRef}\n            className=\"transition-transform duration-200 shadow-2xl\"\n            style={{ \n              transform: `scale(${zoom})`,\n              transformOrigin: 'top center'\n            }}\n          >\n            <div className=\"w-[8.5in] bg-white dark:bg-white text-black min-h-[11in] shadow-lg\">\n              <TemplateRenderer\n                content={content}\n                templateId={templateId}\n                className=\"w-full h-full\"\n              />\n            </div>\n          </div>\n        </div>\n      </ScrollArea>\n\n      {/* Preview Footer */}\n      <div className=\"p-4 border-t border-border bg-card\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div className=\"flex items-center space-x-4\">\n            <span>Template: {template?.name || 'Unknown'}</span>\n            <span>•</span>\n            <span>Last updated: {new Date().toLocaleTimeString()}</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <span>Ready for export</span>\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6389},"client/src/components/resume/template-selector.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  resumeTemplates, \n  getTemplatesByCategory,\n  getTemplatesByExperienceLevel,\n  ResumeTemplate \n} from \"@/data/resume-templates\";\nimport { ExperienceLevel, TemplateCategory } from \"@shared/schema\";\nimport { Star, Search, Palette, Briefcase, Sparkles } from \"lucide-react\";\n\ninterface TemplateSelectorProps {\n  selectedTemplateId: string;\n  onSelectTemplate: (templateId: string) => void;\n  experienceLevel?: ExperienceLevel;\n  className?: string;\n}\n\nexport function TemplateSelector({ \n  selectedTemplateId, \n  onSelectTemplate, \n  experienceLevel,\n  className = \"\"\n}: TemplateSelectorProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<TemplateCategory | \"all\">(\"all\");\n\n  const getFilteredTemplates = (): ResumeTemplate[] => {\n    let templates = resumeTemplates;\n\n    // Filter by experience level if specified\n    if (experienceLevel) {\n      templates = getTemplatesByExperienceLevel(experienceLevel);\n    }\n\n    // Filter by category\n    if (selectedCategory !== \"all\") {\n      templates = templates.filter(template => template.category === selectedCategory);\n    }\n\n    // Filter by search term\n    if (searchTerm) {\n      templates = templates.filter(template =>\n        template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        template.description.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    return templates;\n  };\n\n  const filteredTemplates = getFilteredTemplates();\n\n  const getCategoryIcon = (category: TemplateCategory) => {\n    switch (category) {\n      case \"professional\":\n        return <Briefcase className=\"w-4 h-4\" />;\n      case \"creative\":\n        return <Palette className=\"w-4 h-4\" />;\n      case \"modern\":\n        return <Sparkles className=\"w-4 h-4\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getCategoryColor = (category: TemplateCategory) => {\n    switch (category) {\n      case \"professional\":\n        return \"bg-primary/10 text-primary border-primary/20\";\n      case \"creative\":\n        return \"bg-accent/10 text-accent-foreground border-accent/20\";\n      case \"modern\":\n        return \"bg-secondary/10 text-secondary border-secondary/20\";\n      default:\n        return \"bg-muted\";\n    }\n  };\n\n  return (\n    <div className={`h-full flex flex-col bg-background ${className}`}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-border bg-card\">\n        <h2 className=\"text-2xl font-bold text-foreground mb-4\">Choose Template</h2>\n        \n        {/* Search */}\n        <div className=\"relative mb-4\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n          <Input\n            placeholder=\"Search templates...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-template-search\"\n          />\n        </div>\n\n        {/* Category Filters */}\n        <Tabs value={selectedCategory} onValueChange={(value) => setSelectedCategory(value as TemplateCategory | \"all\")}>\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"all\" className=\"flex items-center space-x-2\">\n              <span>All</span>\n              <Badge variant=\"secondary\" className=\"ml-1 text-xs\">\n                {filteredTemplates.length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"professional\" className=\"flex items-center space-x-2\">\n              {getCategoryIcon(\"professional\")}\n              <span className=\"hidden sm:inline\">Professional</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"creative\" className=\"flex items-center space-x-2\">\n              {getCategoryIcon(\"creative\")}\n              <span className=\"hidden sm:inline\">Creative</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"modern\" className=\"flex items-center space-x-2\">\n              {getCategoryIcon(\"modern\")}\n              <span className=\"hidden sm:inline\">Modern</span>\n            </TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </div>\n\n      {/* Templates Grid */}\n      <ScrollArea className=\"flex-1\">\n        <div className=\"p-6\">\n          {experienceLevel && (\n            <div className=\"mb-6 p-4 bg-primary/5 border border-primary/20 rounded-lg\">\n              <p className=\"text-sm text-primary font-medium\">\n                Showing templates optimized for {experienceLevel} level professionals\n              </p>\n            </div>\n          )}\n\n          {filteredTemplates.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-6 h-6 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No templates found</h3>\n              <p className=\"text-muted-foreground\">\n                Try adjusting your search terms or category filters\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredTemplates.map((template) => (\n                <Card\n                  key={template.id}\n                  className={`cursor-pointer transition-all duration-200 hover:shadow-lg hover:-translate-y-1 ${\n                    selectedTemplateId === template.id \n                      ? 'ring-2 ring-primary shadow-lg' \n                      : 'hover:ring-1 hover:ring-border'\n                  }`}\n                  onClick={() => onSelectTemplate(template.id)}\n                  data-testid={`card-template-${template.id}`}\n                >\n                  {/* Template Preview */}\n                  <div className={`aspect-[3/4] ${template.preview} p-4 rounded-t-lg relative`}>\n                    {template.popular && (\n                      <div className=\"absolute top-2 right-2\">\n                        <Badge className=\"bg-accent text-accent-foreground\">\n                          Popular\n                        </Badge>\n                      </div>\n                    )}\n                    \n                    <div \n                      className=\"bg-white dark:bg-white rounded-lg p-4 shadow-sm h-full flex flex-col justify-between\"\n                      style={{ color: '#000' }}\n                    >\n                      {/* Header */}\n                      <div className=\"space-y-2\">\n                        <div \n                          className=\"h-3 rounded w-full\"\n                          style={{ backgroundColor: template.colors.primary }}\n                        />\n                        <div className=\"h-1.5 bg-gray-300 rounded w-3/4\" />\n                        <div className=\"h-1.5 bg-gray-300 rounded w-1/2\" />\n                      </div>\n                      \n                      {/* Content sections */}\n                      <div className=\"space-y-3 flex-1 mt-4\">\n                        <div className=\"space-y-1\">\n                          <div className=\"h-1 bg-gray-400 rounded w-1/4\" />\n                          <div className=\"h-1 bg-gray-300 rounded\" />\n                          <div className=\"h-1 bg-gray-300 rounded w-4/5\" />\n                          <div className=\"h-1 bg-gray-300 rounded w-3/5\" />\n                        </div>\n                        \n                        <div className=\"space-y-1\">\n                          <div className=\"h-1 bg-gray-400 rounded w-1/3\" />\n                          <div className=\"h-1 bg-gray-300 rounded w-5/6\" />\n                          <div className=\"h-1 bg-gray-300 rounded w-2/3\" />\n                        </div>\n                      </div>\n                      \n                      {/* Footer accent */}\n                      <div \n                        className=\"h-1 rounded w-full mt-4\"\n                        style={{ backgroundColor: template.colors.secondary }}\n                      />\n                    </div>\n                  </div>\n\n                  {/* Template Info */}\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h3 className=\"font-semibold text-foreground\">{template.name}</h3>\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"w-3 h-3 text-accent fill-accent\" />\n                        <span className=\"text-xs text-muted-foreground\">{template.rating}</span>\n                      </div>\n                    </div>\n                    \n                    <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n                      {template.description}\n                    </p>\n                    \n                    <div className=\"flex items-center justify-between\">\n                      <Badge \n                        variant=\"outline\" \n                        className={`text-xs ${getCategoryColor(template.category)}`}\n                      >\n                        {getCategoryIcon(template.category)}\n                        <span className=\"ml-1 capitalize\">{template.category}</span>\n                      </Badge>\n                      \n                      {selectedTemplateId === template.id && (\n                        <Badge className=\"bg-primary text-primary-foreground\">\n                          Selected\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-3 flex flex-wrap gap-1\">\n                      {template.features.slice(0, 2).map((feature, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {feature}\n                        </Badge>\n                      ))}\n                      {template.features.length > 2 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{template.features.length - 2} more\n                        </Badge>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Footer */}\n      {selectedTemplateId && (\n        <div className=\"p-4 border-t border-border bg-card\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Selected: {filteredTemplates.find(t => t.id === selectedTemplateId)?.name}\n            </div>\n            <Button\n              onClick={() => onSelectTemplate(selectedTemplateId)}\n              className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n              data-testid=\"button-use-template\"\n            >\n              Use This Template\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11395},"client/src/components/templates/template-renderer.tsx":{"content":"import { ResumeContent } from \"@shared/schema\";\nimport { getTemplate } from \"@/data/resume-templates\";\n\ninterface TemplateRendererProps {\n  content: ResumeContent;\n  templateId: string;\n  className?: string;\n}\n\nexport function TemplateRenderer({ content, templateId, className = \"\" }: TemplateRendererProps) {\n  const template = getTemplate(templateId);\n  \n  if (!template) {\n    return (\n      <div className={`p-8 text-center ${className}`}>\n        <p className=\"text-gray-500\">Template not found</p>\n      </div>\n    );\n  }\n\n  const { personalInfo, summary, experience, education, skills, projects } = content;\n\n  // Helper function to format dates\n  const formatDateRange = (startDate: string, endDate: string, current: boolean) => {\n    const start = startDate || \"Present\";\n    const end = current ? \"Present\" : (endDate || \"Present\");\n    return `${start} - ${end}`;\n  };\n\n  // Different template layouts based on template category\n  if (template.category === \"modern\") {\n    return (\n      <div className={`bg-white p-8 font-sans text-gray-900 ${className}`} style={{ minHeight: '11in', width: '8.5in' }}>\n        {/* Modern Template Layout */}\n        <div className=\"flex\">\n          {/* Left Column - 1/3 width */}\n          <div className=\"w-1/3 pr-6\" style={{ backgroundColor: template.colors.primary, color: 'white', padding: '2rem 1.5rem', margin: '-2rem 0 -2rem -2rem' }}>\n            {/* Personal Info */}\n            <div className=\"mb-8\">\n              <h1 className=\"text-2xl font-bold mb-1\">{personalInfo.firstName} {personalInfo.lastName}</h1>\n              <div className=\"text-sm opacity-90 space-y-1\">\n                <div>{personalInfo.email}</div>\n                <div>{personalInfo.phone}</div>\n                <div>{personalInfo.location}</div>\n                {personalInfo.linkedin && <div>{personalInfo.linkedin}</div>}\n                {personalInfo.website && <div>{personalInfo.website}</div>}\n              </div>\n            </div>\n\n            {/* Skills */}\n            {skills.length > 0 && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-lg font-semibold mb-4\">Skills</h2>\n                {skills.map((skillGroup) => (\n                  <div key={skillGroup.id} className=\"mb-4\">\n                    <h3 className=\"font-medium mb-2\">{skillGroup.category}</h3>\n                    <div className=\"text-sm opacity-90\">\n                      {skillGroup.items.map((skill, index) => (\n                        <div key={index} className=\"mb-1\">• {skill}</div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Right Column - 2/3 width */}\n          <div className=\"w-2/3 pl-6\">\n            {/* Professional Summary */}\n            {summary && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold mb-3\" style={{ color: template.colors.primary }}>Professional Summary</h2>\n                <p className=\"text-sm leading-relaxed\">{summary}</p>\n              </div>\n            )}\n\n            {/* Experience */}\n            {experience.length > 0 && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold mb-4\" style={{ color: template.colors.primary }}>Experience</h2>\n                {experience.map((exp) => (\n                  <div key={exp.id} className=\"mb-6\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{exp.position}</h3>\n                        <p className=\"font-medium\" style={{ color: template.colors.secondary }}>{exp.company}</p>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        {formatDateRange(exp.startDate, exp.endDate, exp.current)}\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-700 mb-2\">{exp.location}</p>\n                    {exp.description && (\n                      <p className=\"text-sm leading-relaxed mb-2\">{exp.description}</p>\n                    )}\n                    {exp.achievements.length > 0 && (\n                      <ul className=\"text-sm space-y-1\">\n                        {exp.achievements.map((achievement, index) => (\n                          <li key={index} className=\"flex items-start\">\n                            <span className=\"mr-2\">•</span>\n                            <span>{achievement}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Education */}\n            {education.length > 0 && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold mb-4\" style={{ color: template.colors.primary }}>Education</h2>\n                {education.map((edu) => (\n                  <div key={edu.id} className=\"mb-4\">\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h3 className=\"font-semibold\">{edu.degree}</h3>\n                        <p className=\"font-medium\" style={{ color: template.colors.secondary }}>{edu.school}</p>\n                        <p className=\"text-sm text-gray-700\">{edu.location}</p>\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        {edu.graduationDate}\n                      </div>\n                    </div>\n                    {edu.gpa && (\n                      <p className=\"text-sm text-gray-700\">GPA: {edu.gpa}</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n\n            {/* Projects */}\n            {projects && projects.length > 0 && (\n              <div className=\"mb-8\">\n                <h2 className=\"text-xl font-semibold mb-4\" style={{ color: template.colors.primary }}>Projects</h2>\n                {projects.map((project) => (\n                  <div key={project.id} className=\"mb-4\">\n                    <h3 className=\"font-semibold\">{project.name}</h3>\n                    <p className=\"text-sm leading-relaxed mb-2\">{project.description}</p>\n                    <p className=\"text-sm text-gray-700\">\n                      <strong>Technologies:</strong> {project.technologies.join(\", \")}\n                    </p>\n                    {project.url && (\n                      <p className=\"text-sm text-gray-700\">\n                        <strong>URL:</strong> {project.url}\n                      </p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Professional/Classic Template (default)\n  return (\n    <div className={`bg-white p-8 font-sans text-gray-900 ${className}`} style={{ minHeight: '11in', width: '8.5in' }}>\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\" style={{ color: template.colors.primary }}>\n          {personalInfo.firstName} {personalInfo.lastName}\n        </h1>\n        <div className=\"text-sm text-gray-600 space-x-2\">\n          <span>{personalInfo.email}</span>\n          <span>•</span>\n          <span>{personalInfo.phone}</span>\n          <span>•</span>\n          <span>{personalInfo.location}</span>\n          {personalInfo.linkedin && (\n            <>\n              <span>•</span>\n              <span>{personalInfo.linkedin}</span>\n            </>\n          )}\n        </div>\n      </div>\n\n      {/* Professional Summary */}\n      {summary && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-3 pb-2 border-b-2\" style={{ borderColor: template.colors.primary }}>\n            Professional Summary\n          </h2>\n          <p className=\"text-sm leading-relaxed\">{summary}</p>\n        </div>\n      )}\n\n      {/* Experience */}\n      {experience.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 pb-2 border-b-2\" style={{ borderColor: template.colors.primary }}>\n            Work Experience\n          </h2>\n          {experience.map((exp) => (\n            <div key={exp.id} className=\"mb-6\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\">{exp.position}</h3>\n                  <p className=\"font-medium\" style={{ color: template.colors.secondary }}>{exp.company} • {exp.location}</p>\n                </div>\n                <div className=\"text-sm text-gray-600 text-right\">\n                  {formatDateRange(exp.startDate, exp.endDate, exp.current)}\n                </div>\n              </div>\n              {exp.description && (\n                <p className=\"text-sm leading-relaxed mb-2\">{exp.description}</p>\n              )}\n              {exp.achievements.length > 0 && (\n                <ul className=\"text-sm space-y-1\">\n                  {exp.achievements.map((achievement, index) => (\n                    <li key={index} className=\"flex items-start\">\n                      <span className=\"mr-2\">•</span>\n                      <span>{achievement}</span>\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Education */}\n      {education.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 pb-2 border-b-2\" style={{ borderColor: template.colors.primary }}>\n            Education\n          </h2>\n          {education.map((edu) => (\n            <div key={edu.id} className=\"mb-4\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h3 className=\"font-semibold\">{edu.degree}</h3>\n                  <p className=\"font-medium\" style={{ color: template.colors.secondary }}>\n                    {edu.school} • {edu.location}\n                  </p>\n                  {edu.gpa && (\n                    <p className=\"text-sm text-gray-700\">GPA: {edu.gpa}</p>\n                  )}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  {edu.graduationDate}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Skills */}\n      {skills.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 pb-2 border-b-2\" style={{ borderColor: template.colors.primary }}>\n            Skills\n          </h2>\n          {skills.map((skillGroup) => (\n            <div key={skillGroup.id} className=\"mb-3\">\n              <div className=\"flex\">\n                <span className=\"font-semibold w-32 flex-shrink-0\">{skillGroup.category}:</span>\n                <span className=\"text-sm\">{skillGroup.items.join(\", \")}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Projects */}\n      {projects && projects.length > 0 && (\n        <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold mb-4 pb-2 border-b-2\" style={{ borderColor: template.colors.primary }}>\n            Projects\n          </h2>\n          {projects.map((project) => (\n            <div key={project.id} className=\"mb-4\">\n              <h3 className=\"font-semibold\">{project.name}</h3>\n              <p className=\"text-sm leading-relaxed mb-1\">{project.description}</p>\n              <p className=\"text-sm text-gray-700\">\n                <strong>Technologies:</strong> {project.technologies.join(\", \")}\n              </p>\n              {project.url && (\n                <p className=\"text-sm text-gray-700\">\n                  <strong>URL:</strong> {project.url}\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":12015},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}